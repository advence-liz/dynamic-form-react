{"version":3,"sources":["components/DynamicFormDesigner/components/Widget/index.tsx","components/DynamicFormDesigner/util.tsx","components/DynamicFormDesigner/components/DynamicForm/components/Swimlane/index.tsx","components/DynamicFormDesigner/components/DynamicForm/index.tsx","components/DynamicFormDesigner/components/DynamicForm/util.ts","components/DynamicFormDesigner/components/DynamicForm/components/Swimlane/components/Cell/components/FormGroup/index.tsx","components/DynamicFormDesigner/components/DynamicForm/components/Swimlane/components/Cell/components/InputCell/index.tsx","components/DynamicFormDesigner/components/DynamicForm/components/Swimlane/components/Cell/components/GridCell/index.tsx","components/DynamicFormDesigner/components/DynamicForm/components/Swimlane/components/Cell/index.tsx","components/DynamicFormDesigner/index.tsx","App.js","serviceWorker.js","index.js"],"names":["Widget","widget","useDrag","item","type","collect","monitor","isDragging","drag","key","name","className","ref","icon","get","rootCellData","parentId","swimlaneIndex","list","func","data","id","swimlanes","cellDataList","swimlane","cellData","copyAndSplice","originData","location","cellDataId","cellId","indexOf","locateById","copy","JSON","parse","stringify","src","cell","find","splice","reducer","state","action","hoverIndex","locateByCellDataListRef","push","dropLocation","createWidgetInstance","widgetType","element","Date","getTime","span","label","placeholder","required","options","Swimlane","elements","direction","dispatch","useContext","DynamicFormDesignerContext","useDrop","accept","drop","isOver","shallow","layout","map","child","index","DynamicFormContext","React","createContext","DynamicForm","forwardRef","style","useReducer","current","target","value","row","i","length","listElement","Provider","FormGroup","warning","warningable","join","InputCell","labeled","title","onChange","event","GridCell","Cell","useRef","designerDispatch","hover","dragIndex","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","top","clientOffset","getClientOffset","hoverClientY","y","Sider","Layout","Content","Header","widgetGroup","widgets","enable","DynamicFormDesigner","DndProvider","backend","Backend","width","g","color","w","height","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fb6c196a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {WidgetData} from \"../../schemas/WidgetData\";\r\nimport {useDrag} from \"react-dnd\";\r\n\r\ninterface WidgetProps {\r\n    widget: WidgetData;\r\n}\r\n\r\nexport function Widget({widget}: WidgetProps) {\r\n    const [{isDragging}, drag] = useDrag({\r\n        item: {type: widget.type},\r\n        collect: monitor => ({\r\n            isDragging: !!monitor.isDragging()\r\n        })\r\n    });\r\n\r\n    return <li key={widget.name} className={'widget'} ref={drag}>\r\n        {widget.icon}\r\n        <span>{widget.name}</span>\r\n    </li>;\r\n}","import {CellData} from \"./schemas/CellData\";\r\nimport SwimlaneLocation from \"./schemas/SwimlaneLocation\";\r\n\r\nexport function locateById(rootCellData: CellData, cellDataId: string): SwimlaneLocation | null {\r\n    let location: SwimlaneLocation | null = null;\r\n    let func = function (data: CellData): SwimlaneLocation | null {\r\n        if (data.swimlanes) {\r\n            for (const swimlane of data.swimlanes) {\r\n                for (const cellData of swimlane.cellDataList) {\r\n                    if (cellData.id === cellDataId) {\r\n                        location = {\r\n                            cellId: data.id,\r\n                            swimlaneIndex: data.swimlanes?.indexOf(swimlane)\r\n                        }\r\n                        break;\r\n                    }\r\n                    if (cellData.type === 'grid') {\r\n                        func(cellData);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return location;\r\n    };\r\n    return func(rootCellData);\r\n}\r\n\r\nexport function get(rootCellData: CellData, parentId: string, swimlaneIndex: number): CellData[] | null {\r\n    let list: CellData[] | null = null;\r\n    let func = function (data: CellData) {\r\n        if (data.id === parentId) {\r\n            return data.swimlanes![swimlaneIndex].cellDataList;\r\n        }\r\n        if (data.swimlanes) {\r\n            for (const swimlane of data.swimlanes) {\r\n                for (const cellData of swimlane.cellDataList) {\r\n                    if (cellData.type === 'grid') {\r\n                        if (cellData.id === parentId) {\r\n                            list = cellData.swimlanes![swimlaneIndex].cellDataList;\r\n                        } else {\r\n                            func(cellData);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return list;\r\n    };\r\n    return func(rootCellData);\r\n}\r\n\r\nexport function locateByCellDataListRef(rootCellData: CellData, cellDataList: CellData[]): SwimlaneLocation | null {\r\n    let location: SwimlaneLocation | null = null;\r\n    let func = function (data: CellData): SwimlaneLocation | null {\r\n        if (data.swimlanes) {\r\n            for (const swimlane of data.swimlanes) {\r\n                if (swimlane.cellDataList === cellDataList) {\r\n                    location = {\r\n                        cellId: data.id,\r\n                        swimlaneIndex: data.swimlanes.indexOf(swimlane),\r\n                    }\r\n                    break;\r\n                } else {\r\n                    for (const cellData of swimlane.cellDataList) {\r\n                        if (cellData.type === 'grid') {\r\n                            func(cellData);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return location;\r\n    };\r\n    return func(rootCellData);\r\n}\r\n\r\nexport function copyAndSplice(originData: CellData, id: string): [CellData, CellData[], CellData] {\r\n    const location = locateById(originData, id)!;\r\n    const copy = JSON.parse(JSON.stringify(originData));\r\n    const src = get(copy, location.cellId, location.swimlaneIndex)!;\r\n    const cell = src.find(cell => cell.id === id)!;\r\n    src.splice(src.indexOf(cell), 1);\r\n    return [copy, src, cell];\r\n}\r\n\r\nexport function reducer(state: any, action: any) {\r\n    if (action.type === 'MOVE') {\r\n        const [copy, src, cell] = copyAndSplice(state, action.id);\r\n        src.splice(action.hoverIndex, 0, cell);\r\n        return copy;\r\n    } else if (action.type === 'ADD') {\r\n        const location = locateByCellDataListRef(state, action.cellDataList)!;\r\n        const copy = JSON.parse(JSON.stringify(state));\r\n        const cells = get(copy, location.cellId, location.swimlaneIndex)!;\r\n        cells.push(action.cellData);\r\n        return copy;\r\n    } else if (action.type === 'JUMP') {\r\n        const [copy, , cell] = copyAndSplice(state, action.id);\r\n        const dest = get(copy, action.dropLocation.cellId, action.dropLocation.swimlaneIndex)!;\r\n        dest.push(cell);\r\n        return copy;\r\n    } else {\r\n        return state;\r\n    }\r\n}\r\n","import {Cell} from \"./components/Cell\";\r\nimport React, {useContext} from \"react\";\r\nimport {CellData} from \"../../../../schemas/CellData\";\r\nimport {useDrop} from \"react-dnd\";\r\nimport {DynamicFormDesignerContext} from \"../../../../index\";\r\nimport SwimlaneLocation from \"../../../../schemas/SwimlaneLocation\";\r\n\r\n\r\ninterface SwimlaneProps {\r\n    elements: CellData[];\r\n    direction: 'column' | 'row';\r\n    location: SwimlaneLocation;\r\n}\r\n\r\nfunction createWidgetInstance(widgetType: string) {\r\n    let element: CellData = {type: widgetType, id: widgetType + new Date().getTime()};\r\n    if (element.type === 'grid') {\r\n        element.swimlanes = [{span: 50, cellDataList: []}, {span: 50, cellDataList: []}];\r\n    } else if (element.type === 'input') {\r\n        element.label = '单行文本';\r\n        element.placeholder = '请填写';\r\n        element.required = false;\r\n    } else if (element.type === 'textarea') {\r\n        element.label = '多行文本';\r\n        element.placeholder = '请填写';\r\n        element.required = false;\r\n    } else if (element.type === 'dropdown') {\r\n        element.label = '下拉选择';\r\n        element.placeholder = '请选择';\r\n        element.options = [];\r\n        element.required = false;\r\n    } else if (element.type === 'list') {\r\n        element.label = '列表';\r\n        element.swimlanes = [{cellDataList: [], span: 100}];\r\n    } else if (element.type === 'datetime') {\r\n        element.label = '日期时间';\r\n        element.placeholder = '请选择';\r\n        element.required = false;\r\n    } else if (element.type === 'checkbox') {\r\n        element.label = '多选';\r\n        element.options = [];\r\n        element.required = false;\r\n    } else if (element.type === 'radio') {\r\n        element.label = '单选';\r\n        element.options = [];\r\n        element.required = false;\r\n    }\r\n    return element;\r\n}\r\n\r\nexport const Swimlane = function ({elements, direction, location}: SwimlaneProps) {\r\n    const dispatch = useContext(DynamicFormDesignerContext);\r\n    const [{isOver}, drop] = useDrop({\r\n        accept: ['input', 'grid', 'instance'],\r\n        drop: (item: any) => {\r\n            if (isOver) {\r\n                if (item.type === 'instance') {\r\n                    dispatch({\r\n                        type: 'JUMP',\r\n                        dropLocation: location,\r\n                        id: item.id,\r\n                    });\r\n                } else {\r\n                    dispatch({\r\n                        type: 'ADD',\r\n                        cellData: createWidgetInstance(item.type as string),\r\n                        cellDataList: elements,\r\n                    });\r\n                }\r\n            }\r\n        },\r\n        collect: monitor => {\r\n            let isOver = monitor.isOver({shallow: true});\r\n            return {isOver: isOver};\r\n        }\r\n    });\r\n\r\n    const layout = direction === 'column' ? 'default' : 'inline';\r\n    return <td className={'swimlane ' + direction + (isOver ? ' hovered' : '')} ref={drop}>\r\n        {\r\n            elements.map((child, index) =>\r\n                <Cell key={child.id} layout={layout} cellData={child} index={index}/>)\r\n        }\r\n    </td>;\r\n}","import React, {CSSProperties, forwardRef, useReducer} from \"react\";\r\nimport {setValue} from \"./util\";\r\nimport './index.css';\r\nimport {Swimlane} from \"./components/Swimlane\";\r\nimport {CellData} from \"../../schemas/CellData\";\r\n\r\ninterface DynamicFormProps {\r\n    direction?: 'column' | 'row';\r\n    cellData: CellData;\r\n    style?: CSSProperties;\r\n}\r\n\r\nexport const DynamicFormContext = React.createContext<any>(null);\r\n\r\nexport const DynamicForm = forwardRef(({direction = 'column', cellData, style}: DynamicFormProps, ref: any) => {\r\n    const [, dispatch] = useReducer(function (state: any, action: any) {\r\n        switch (action.type) {\r\n            case 'SET_CURRENT':\r\n                return {...state, current: action.element};\r\n            case 'SET_VALUE':\r\n                setValue(state.data, action.target, action.value);\r\n                return {...state};\r\n            default:\r\n                return state;\r\n        }\r\n    }, {current: null, data: cellData});\r\n    return <DynamicFormContext.Provider value={dispatch}>\r\n        <table ref={ref} className={'swimlanes'} style={style}>\r\n            <tbody>\r\n            {\r\n                direction === 'column' ? <tr>\r\n                    {\r\n                        cellData.swimlanes?.map((swimlane, index) => {\r\n                            return (\r\n                                <Swimlane key={cellData.id + '-' + index} direction={direction}\r\n                                          elements={swimlane.cellDataList}\r\n                                          location={{cellId: cellData.id, swimlaneIndex: index}}/>\r\n                            );\r\n                        })\r\n                    }\r\n                </tr> : <>\r\n                    {\r\n                        cellData.swimlanes?.map((swimlane, index) => {\r\n                            return (\r\n                                <tr key={cellData.id + '-' + index}>\r\n                                    <Swimlane elements={swimlane.cellDataList} direction={direction}\r\n                                              location={{cellId: cellData.id, swimlaneIndex: index}}/>\r\n                                </tr>\r\n                            );\r\n                        })\r\n                    }\r\n                </>\r\n            }\r\n            </tbody>\r\n        </table>\r\n    </DynamicFormContext.Provider>;\r\n})","import {CellData} from \"../../schemas/CellData\";\r\n\r\nexport function getData(cell: CellData) {\r\n    let result = {};\r\n    let func = function (data: CellData, result: { [key: string]: any }) {\r\n        if (data.swimlanes) {\r\n            data.swimlanes.forEach(swimlane => {\r\n                swimlane.cellDataList.forEach(element => {\r\n                    switch (element.type) {\r\n                        case 'grid':\r\n                            func(element, result);\r\n                            break;\r\n                        case 'list':\r\n                            result[element.id] = [];\r\n                            // @ts-ignore\r\n                            element.swimlanes.forEach((row, index) => {\r\n                                if (index > 0) {\r\n                                    let rowResult: { [key: string]: any } = {};\r\n                                    row.cellDataList.forEach((listElement: CellData) => {\r\n                                        rowResult[listElement.id] = listElement.value;\r\n                                    });\r\n                                    result[element.id].push(rowResult);\r\n                                }\r\n                            });\r\n                            break;\r\n                        default:\r\n                            result[element.id] = element.value;\r\n                            break;\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    };\r\n    func(cell, result);\r\n    return result;\r\n}\r\n\r\nexport function setValue(cell: CellData, target: CellData, value: any) {\r\n    let func = function (data: CellData) {\r\n        if (data.swimlanes) {\r\n            for (const swimlane of data.swimlanes) {\r\n                for (const element of swimlane.cellDataList) {\r\n                    switch (element.type) {\r\n                        case 'grid':\r\n                            func(element);\r\n                            break;\r\n                        case 'list':\r\n                            // @ts-ignore\r\n                            for (const row of element.swimlanes) {\r\n                                for (let i = 0; i < row.cellDataList.length; i++) {\r\n                                    let listElement = row.cellDataList[i];\r\n                                    if (listElement === target) {\r\n                                        listElement.value = value;\r\n                                        return true;\r\n                                    }\r\n                                }\r\n                            }\r\n                            break;\r\n                        default:\r\n                            if (element === target) {\r\n                                element.value = value;\r\n                                return true;\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    return func(cell);\r\n}\r\n","import React, {forwardRef} from \"react\";\r\nimport './index.css';\r\n\r\ninterface FormGroupProps {\r\n    layout?: 'inline' | 'default';\r\n    required: boolean;\r\n    warning?: string | null;\r\n    warningable: boolean;\r\n    label: JSX.Element | null;\r\n    element: JSX.Element;\r\n}\r\n\r\nexport const FormGroup = forwardRef(({\r\n                                         layout = 'default', required = false, warning = null,\r\n                                         warningable = true, label, element\r\n                                     }: FormGroupProps, ref: any) => {\r\n    return <table ref={ref} className={['form-group', layout].join(' ')}>\r\n        <tbody>\r\n        {\r\n            layout === 'default' ? <>\r\n                <tr>\r\n                    <td className={'label'}>\r\n                        {\r\n                            required ? <span className={'required'}>*</span> : <></>\r\n                        }\r\n                        {label}\r\n                    </td>\r\n                    <td>\r\n                        {element}\r\n                    </td>\r\n                </tr>\r\n                {\r\n                    warningable ? <tr>\r\n                        <td/>\r\n                        <td className={'warning'}>\r\n                            {warning ? <span>{warning}</span> : <span>&nbsp;</span>}\r\n                        </td>\r\n                    </tr> : <></>\r\n                }\r\n            </> : <>\r\n                <tr>\r\n                    <td className={'label'}>\r\n                        {\r\n                            required ? <span className={'required'}>*</span> : <></>\r\n                        }\r\n                        {label}\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        {element}\r\n                    </td>\r\n                </tr>\r\n                {\r\n                    warningable ? <tr>\r\n                        <td className={'warning'}>\r\n                            {warning ? <span>{warning}</span> : <span>&nbsp;</span>}\r\n                        </td>\r\n                    </tr> : <></>\r\n                }\r\n            </>\r\n        }\r\n        </tbody>\r\n    </table>;\r\n})","import React, {forwardRef} from \"react\";\r\nimport {Input} from \"antd\";\r\nimport {FormGroup} from \"../FormGroup\";\r\nimport {CellData} from \"../../../../../../../../schemas/CellData\";\r\n\r\n\r\ninterface InputCellProps {\r\n    element: CellData;\r\n    layout?: 'inline' | 'default';\r\n    dispatch: any;\r\n}\r\n\r\nexport const InputCell = forwardRef(({element, layout, dispatch}: InputCellProps, ref: any) => <>\r\n    <FormGroup ref={ref} required={element.required!} warning={element.warning} layout={layout}\r\n               warningable={element.warningable!}\r\n               label={\r\n                   element.labeled ?\r\n                       <label title={element.label}>{element.label}</label> : <></>\r\n               }\r\n               element={\r\n                   <Input value={element.value} placeholder={element.placeholder}\r\n                          onChange={(event) => {\r\n                              dispatch({\r\n                                  type: 'SET_VALUE',\r\n                                  target: element,\r\n                                  value: event.target.value\r\n                              });\r\n                          }}\r\n                   />\r\n               }\r\n    />\r\n</>)","import React, {forwardRef} from \"react\";\r\nimport {DynamicForm} from \"../../../../../../index\";\r\nimport {CellData} from \"../../../../../../../../schemas/CellData\";\r\n\r\n\r\ninterface GridCellProps {\r\n    element: CellData;\r\n}\r\n\r\nexport const GridCell = forwardRef(({element}: GridCellProps, ref: any) => {\r\n    return <>\r\n        <DynamicForm ref={ref} cellData={element}/>\r\n    </>;\r\n})","import React, {useContext, useRef} from \"react\";\r\nimport {useDrag, useDrop, XYCoord} from \"react-dnd\";\r\nimport {CellData} from \"../../../../../../schemas/CellData\";\r\nimport {DynamicFormDesignerContext} from \"../../../../../../index\";\r\nimport {DynamicFormContext} from \"../../../../index\";\r\nimport {InputCell} from \"./components/InputCell\";\r\nimport {GridCell} from \"./components/GridCell\";\r\n\r\ninterface CellProps {\r\n    cellData: CellData;\r\n    layout?: 'inline' | 'default';\r\n    index: number;\r\n}\r\n\r\ninterface DragItem {\r\n    index: number;\r\n    id: string;\r\n    type: string;\r\n}\r\n\r\nexport const Cell = function ({cellData, index, layout}: CellProps) {\r\n    const data = {\r\n        ...cellData,\r\n        required: false,\r\n        warningable: false,\r\n        layout: 'default',\r\n        labeled: true\r\n    };\r\n    const ref = useRef<any>(null);\r\n    const designerDispatch = useContext(DynamicFormDesignerContext);\r\n    const [, drop] = useDrop({\r\n        accept: ['instance'],\r\n        hover(item: DragItem, monitor) {\r\n            if (!ref.current) {\r\n                return;\r\n            }\r\n\r\n            const dragIndex = item.index;\r\n            const hoverIndex = index;\r\n\r\n            if (dragIndex === hoverIndex) {\r\n                return;\r\n            }\r\n\r\n            const hoverBoundingRect = ref.current!.getBoundingClientRect();\r\n            const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\r\n            const clientOffset = monitor.getClientOffset();\r\n            if (!clientOffset) {\r\n                return;\r\n            }\r\n            const hoverClientY = (clientOffset as XYCoord).y - hoverBoundingRect.top;\r\n            if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\r\n                return;\r\n            }\r\n            if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\r\n                return;\r\n            }\r\n            designerDispatch({\r\n                type: 'MOVE',\r\n                hoverIndex: hoverIndex,\r\n                id: item.id\r\n            });\r\n            item.index = hoverIndex;\r\n        },\r\n    });\r\n\r\n    const [, drag] = useDrag({\r\n        item: {type: 'instance', id: cellData.id, index},\r\n        collect: (monitor: any) => ({\r\n            isDragging: monitor.isDragging(),\r\n        }),\r\n    });\r\n    drag(drop(ref));\r\n\r\n    const dispatch = useContext(DynamicFormContext);\r\n    if (cellData.type === 'input') {\r\n        return <div ref={ref} className={'instance'}>\r\n            <span className={'id'}>{data.id}</span>\r\n            <InputCell element={data} dispatch={dispatch} layout={layout}/>\r\n        </div>;\r\n    } else if (cellData.type === 'grid') {\r\n        return <div ref={ref} className={'instance'}>\r\n            <span className={'id'}>{data.id}</span>\r\n            <GridCell element={data}/>\r\n        </div>\r\n    } else {\r\n        return <></>;\r\n    }\r\n}","import React, {Fragment, useReducer} from 'react';\r\nimport {Layout, Button, Space} from 'antd';\r\nimport {DndProvider} from \"react-dnd\";\r\nimport Backend from \"react-dnd-html5-backend\";\r\nimport {\r\n    AiOutlineCalendar,\r\n    AiOutlineCheckSquare,\r\n    AiOutlineCopy,\r\n    AiOutlineDownSquare,\r\n    AiOutlineEdit,\r\n    AiOutlineMinus,\r\n    AiOutlineOrderedList,\r\n    AiOutlineTable\r\n} from \"react-icons/ai\";\r\nimport {WidgetData} from \"./schemas/WidgetData\";\r\nimport './index.css';\r\nimport {Widget} from \"./components/Widget\";\r\nimport {reducer} from \"./util\";\r\nimport {CellData} from \"./schemas/CellData\";\r\nimport {Cell} from \"./components/DynamicForm/components/Swimlane/components/Cell\";\r\n\r\nconst {Sider, Content, Header} = Layout;\r\n\r\nconst rootCellData: CellData = {\r\n    type: 'grid',\r\n    id: '11270307',\r\n    swimlanes: [{span: 100, cellDataList: []}]\r\n};\r\n\r\nconst widgetGroup: { name: string, widgets: WidgetData[] }[] = [\r\n    {\r\n        name: '基础字段',\r\n        widgets: [\r\n            {type: 'input', icon: <AiOutlineEdit/>, name: '单行文本', enable: true},\r\n            {type: 'textarea', icon: <AiOutlineEdit/>, name: '多行文本', enable: true},\r\n            {type: 'dropdown', icon: <AiOutlineDownSquare/>, name: '下拉选择', enable: true},\r\n            {type: 'datetime', icon: <AiOutlineCalendar/>, name: '日期时间', enable: true},\r\n            {type: 'tree', icon: <AiOutlineDownSquare/>, name: '级联选择', enable: false},\r\n            {type: 'checkbox', icon: <AiOutlineCheckSquare/>, name: '多选', enable: true},\r\n            {type: 'checkbox', icon: <AiOutlineCheckSquare/>, name: '单选', enable: true},\r\n        ]\r\n    },\r\n    {\r\n        name: '高级字段',\r\n        widgets: [\r\n            {type: 'grid', icon: <AiOutlineTable/>, name: '布局', enable: true},\r\n            {type: 'list', icon: <AiOutlineOrderedList/>, name: '列表', enable: true},\r\n            {type: 'separator', icon: <AiOutlineMinus/>, name: '分割线', enable: false},\r\n            {type: 'tab', icon: <AiOutlineCopy/>, name: '标签页', enable: false},\r\n        ]\r\n    }\r\n];\r\n\r\nexport const DynamicFormDesignerContext = React.createContext<any>(null);\r\n\r\nexport const DynamicFormDesigner = function () {\r\n    const [data, dispatch] = useReducer(reducer, rootCellData);\r\n\r\n    return <>\r\n        <DynamicFormDesignerContext.Provider value={dispatch}>\r\n            <DndProvider backend={Backend}>\r\n                <Layout className={'layout'}>\r\n                    <Sider width={280} className={'left'}>\r\n                        {\r\n                            widgetGroup.map(g => <Fragment key={g.name}>\r\n                                <div style={{color: \"white\"}}>{g.name}</div>\r\n                                <ul className={'panel'}>\r\n                                    {\r\n                                        g.widgets.map((w: WidgetData) => {\r\n                                            return <Widget key={w.name} widget={w}/>;\r\n                                        })\r\n                                    }\r\n                                </ul>\r\n                            </Fragment>)\r\n                        }\r\n                    </Sider>\r\n                    <Content>\r\n                        <Layout style={{height: '100%'}}>\r\n                            <Header>\r\n                                <Space>\r\n                                    <Button>清空</Button><Button>预览</Button><Button>保存</Button>\r\n                                </Space>\r\n                            </Header>\r\n                            <Content className={'form'} style={{height: '100%'}}>\r\n                                <Cell cellData={data} index={0}/>\r\n                            </Content>\r\n                        </Layout>\r\n                    </Content>\r\n                    <Sider width={280} className={'right'}/>\r\n                </Layout>\r\n            </DndProvider>\r\n        </DynamicFormDesignerContext.Provider>\r\n    </>;\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {DynamicFormDesigner} from './components/DynamicFormDesigner';\r\n\r\nfunction App() {\r\n  return (\r\n      <DynamicFormDesigner/>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}