{"version":3,"sources":["components/Designer/components/Widget/index.tsx","components/Designer/util.tsx","components/Designer/components/Cell/components/GridCell/components/Pool/components/Lane/index.tsx","components/Designer/components/Cell/components/GridCell/components/Pool/index.tsx","components/Designer/components/Cell/components/GridCell/components/Pool/util.ts","components/Designer/components/Cell/components/FormGroup/index.tsx","components/Designer/components/Cell/components/InputCell/index.tsx","components/Designer/components/Cell/components/GridCell/index.tsx","components/Designer/components/Cell/components/SelectCell/index.tsx","components/Designer/components/Cell/components/DateCell/index.tsx","components/Designer/components/Cell/components/TextAreaCell/index.tsx","components/Designer/components/Cell/index.tsx","constants/WidgetGroups.tsx","components/Designer/index.tsx","App.js","serviceWorker.js","index.js"],"names":["Widget","widget","useDrag","item","type","collect","monitor","isDragging","drag","key","name","className","style","opacity","ref","icon","locate","root","matchFunc","location","func","data","lanes","lane","i","cellDataList","length","cellData","parentId","id","laneIndex","indexOf","index","getCellDataList","list","drop","cell","dropItemId","position","dropLocation","dropList","splice","active","reducer","state","action","copy","JSON","parse","stringify","dragItemId","dragLocation","dragList","dragCell","dragItem","push","cellDataId","rootCellData","cellLocation","deleteActive","prevLocation","currentLocation","createWidgetInstance","widgetType","Date","getTime","span","label","placeholder","required","options","Lane","direction","dispatch","useContext","DesignerContext","useDrop","accept","isOver","getClientOffset","Object","assign","shallow","getItem","layout","cells","map","child","FormContext","React","createContext","Pool","forwardRef","useReducer","current","element","target","value","row","listElement","Provider","FormGroup","warning","warnable","join","InputCell","labeled","title","onChange","event","GridCell","Option","Select","SelectCell","width","option","DateCell","date","TextArea","Input","TextAreaCell","rows","Cell","useRef","designerDispatch","useState","dropClassName","setDropClassName","hover","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","top","clientOffset","hoverClientY","y","console","log","begin","onClick","stopPropagation","WidgetGroups","widgets","enable","Sider","Layout","Content","Header","Designer","delFunction","useCallback","keyCode","useEffect","document","addEventListener","removeEventListener","DndProvider","backend","Backend","g","color","w","height","padding","textAlign","getActive","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.39a27615.chunk.js","sourcesContent":["import React from \"react\";\nimport { WidgetData } from \"../../schemas/WidgetData\";\nimport { useDrag } from \"react-dnd\";\n\ninterface WidgetProps {\n  widget: WidgetData;\n}\n\nexport function Widget({ widget }: WidgetProps) {\n  const [{ isDragging }, drag] = useDrag({\n    item: { type: widget.type },\n    collect: (monitor) => ({\n      isDragging: !!monitor.isDragging(),\n    }),\n  });\n\n  return (\n    <li\n      key={widget.name}\n      className={\"widget\"}\n      style={{ opacity: isDragging ? \"0.5\" : 1 }}\n      ref={drag}\n    >\n      {widget.icon}\n      <span>{widget.name}</span>\n    </li>\n  );\n}\n","import { CellData } from \"./schemas/CellData\";\nimport CellLocation from \"./schemas/CellLocation\";\n\nexport function locate(\n  root: CellData,\n  matchFunc: (value: CellData, index: number, array: CellData[]) => boolean\n): [CellLocation, CellData[], CellData] | null {\n  let location: [CellLocation, CellData[], CellData] | null = null;\n  let func = function (\n    data: CellData\n  ): [CellLocation, CellData[], CellData] | null {\n    if (data.lanes) {\n      for (const lane of data.lanes) {\n        for (let i = 0; i < lane.cellDataList.length; i++) {\n          let cellData = lane.cellDataList[i];\n          if (matchFunc(cellData, i, lane.cellDataList)) {\n            location = [\n              {\n                parentId: data.id,\n                laneIndex: data.lanes?.indexOf(lane),\n                index: i,\n              },\n              lane.cellDataList,\n              cellData,\n            ];\n            break;\n          }\n          if (cellData.type === \"grid\") {\n            func(cellData);\n          }\n        }\n      }\n    }\n    return location;\n  };\n  return func(root);\n}\n\nexport function deleteActive(rootCellData: CellData) {\n  const location = locate(rootCellData, (item) => item.active);\n  if (location) {\n    const [cellLocation, list] = location;\n    list.splice(cellLocation.index, 1);\n  }\n}\n\nexport function getCellDataList(\n  root: CellData,\n  parentId: string,\n  laneIndex: number\n): CellData[] | null {\n  let list: CellData[] | null = null;\n  let func = function (data: CellData) {\n    if (data.id === parentId) {\n      return data.lanes![laneIndex].cellDataList;\n    }\n    if (data.lanes) {\n      for (const lane of data.lanes) {\n        for (const cellData of lane.cellDataList) {\n          if (cellData.type === \"grid\") {\n            if (cellData.id === parentId) {\n              list = cellData.lanes![laneIndex].cellDataList;\n            } else {\n              func(cellData);\n            }\n          }\n        }\n      }\n    }\n    return list;\n  };\n  return func(root);\n}\n\nfunction drop(\n  root: CellData,\n  cell: CellData,\n  dropItemId: string,\n  position: string\n) {\n  const [dropLocation, dropList] = locate(\n    root,\n    (item) => item.id === dropItemId\n  )!;\n  if (position === \"up\") {\n    dropList.splice(dropLocation.index, 0, cell);\n  } else {\n    dropList.splice(dropLocation.index + 1, 0, cell);\n  }\n  active(root, cell.id);\n}\n\nexport function reducer(state: any, action: any): CellData {\n  if (!action.type) {\n    return state;\n  }\n  const copy = JSON.parse(JSON.stringify(state));\n  if (action.type === \"MOVE\") {\n    const [dragLocation, dragList, dragCell] = locate(\n      copy,\n      (item) => item.id === action.dragItemId\n    )!;\n    dragList.splice(dragLocation.index, 1);\n    drop(copy, dragCell, action.dropItemId, action.position);\n  } else if (action.type === \"NOOB\") {\n    drop(copy, action.dragItem, action.dropItemId, action.position);\n  } else if (action.type === \"ADD\") {\n    const cells = getCellDataList(\n      copy,\n      action.location.parentId,\n      action.location.laneIndex\n    )!;\n    cells.push(action.cellData);\n    active(copy, action.cellData.id);\n  } else if (action.type === \"FARM\") {\n    const [location, list, cell] = locate(\n      copy,\n      (item) => item.id === action.cellDataId\n    )!;\n    list.splice(location.index, 1);\n    const cellDataList = getCellDataList(\n      copy,\n      action.location.parentId,\n      action.location.laneIndex\n    );\n    cellDataList?.push(cell);\n    active(copy, cell.id);\n  } else if (action.type === \"ACTIVE\") {\n    active(copy, action.id);\n  } else if (action.type === \"DELETE_ACTIVE\") {\n    deleteActive(copy);\n  }\n  return copy;\n}\n\nexport function getActive(root: CellData): CellData | null {\n  const location = locate(root, (item) => item.active);\n  return location ? location[2] : null;\n}\n\nexport function active(root: CellData, id: string) {\n  const prevLocation = locate(root, (item) => item.active);\n  if (prevLocation) {\n    prevLocation[2].active = false;\n  }\n  const currentLocation = locate(root, (item) => item.id === id);\n  if (currentLocation) {\n    currentLocation[2].active = true;\n  }\n}\n\nexport function createWidgetInstance(widgetType: string) {\n  let cellData: CellData = {\n    type: widgetType,\n    id: widgetType + new Date().getTime(),\n    active: false,\n  };\n  if (cellData.type === \"grid\") {\n    cellData.lanes = [\n      { span: 50, cellDataList: [] },\n      { span: 50, cellDataList: [] },\n    ];\n  } else if (cellData.type === \"input\") {\n    cellData.label = \"单行文本\";\n    cellData.placeholder = \"请填写\";\n    cellData.required = false;\n  } else if (cellData.type === \"textarea\") {\n    cellData.label = \"多行文本\";\n    cellData.placeholder = \"请填写\";\n    cellData.required = false;\n  } else if (cellData.type === \"select\") {\n    cellData.label = \"下拉选择\";\n    cellData.placeholder = \"请选择\";\n    cellData.options = [];\n    cellData.required = false;\n  } else if (cellData.type === \"list\") {\n    cellData.label = \"列表\";\n    cellData.lanes = [{ cellDataList: [], span: 100 }];\n  } else if (cellData.type === \"datetime\") {\n    cellData.label = \"日期时间\";\n    cellData.placeholder = \"请选择\";\n    cellData.required = false;\n  } else if (cellData.type === \"checkbox\") {\n    cellData.label = \"多选\";\n    cellData.options = [];\n    cellData.required = false;\n  } else if (cellData.type === \"radio\") {\n    cellData.label = \"单选\";\n    cellData.options = [];\n    cellData.required = false;\n  }\n  return cellData;\n}\n","import React, { useContext } from \"react\";\nimport { useDrop } from \"react-dnd\";\nimport { Cell } from \"../../../../../../index\";\nimport { CellData } from \"../../../../../../../../schemas/CellData\";\nimport { DesignerContext } from \"../../../../../../../../index\";\nimport SwimlaneLocation from \"../../../../../../../../schemas/SwimlaneLocation\";\nimport { createWidgetInstance } from \"../../../../../../../../util\";\n\ninterface LaneProps {\n  cellDataList: CellData[];\n  direction: \"column\" | \"row\";\n  location: SwimlaneLocation;\n}\n\nexport const Lane = function ({\n  cellDataList,\n  direction,\n  location,\n}: LaneProps) {\n  const dispatch = useContext(DesignerContext);\n  const [{ isOver }, drop] = useDrop({\n    accept: [\"input\", \"textarea\", \"grid\", \"select\", \"datetime\", \"instance\"],\n    drop: (item: any, monitor) => {\n      if (isOver) {\n        const clientOffset = monitor.getClientOffset();\n        if (!clientOffset) {\n          return;\n        }\n\n        if (item.type === \"instance\") {\n          dispatch({\n            type: \"FARM\",\n            cellDataId: item.id,\n            location: location,\n          });\n        } else {\n          dispatch({\n            type: \"ADD\",\n            cellData: createWidgetInstance(item.type as string),\n            location: Object.assign({}, location, {\n              index: cellDataList.length,\n            }),\n          });\n        }\n      }\n    },\n    collect: (monitor) => {\n      let isOver = monitor.isOver({ shallow: true });\n      if (isOver && monitor.getItem().id === location.parentId) {\n        isOver = false;\n      }\n      return { isOver: isOver };\n    },\n  });\n\n  const layout = direction === \"column\" ? \"default\" : \"inline\";\n  const cells = cellDataList.map((child, index) => (\n    <Cell key={child.id} layout={layout} cellData={child} index={index} />\n  ));\n\n  return (\n    <td className={\"lane \" + direction + (isOver ? \" hovered\" : \"\")} ref={drop}>\n      {cells}\n    </td>\n  );\n};\n","import React, { CSSProperties, forwardRef, useReducer } from \"react\";\nimport { setValue } from \"./util\";\nimport \"./index.css\";\nimport { Lane } from \"./components/Lane\";\nimport { CellData } from \"../../../../../../schemas/CellData\";\n\ninterface PoolProps {\n  direction?: \"column\" | \"row\";\n  cellData: CellData;\n  style?: CSSProperties;\n}\n\nexport const FormContext = React.createContext<any>(null);\n\nexport const Pool = forwardRef(\n  ({ direction = \"column\", cellData, style }: PoolProps, ref: any) => {\n    const [, dispatch] = useReducer(\n      function (state: any, action: any) {\n        switch (action.type) {\n          case \"SET_CURRENT\":\n            return { ...state, current: action.element };\n          case \"SET_VALUE\":\n            setValue(state.data, action.target, action.value);\n            return { ...state };\n          default:\n            return state;\n        }\n      },\n      { current: null, data: cellData }\n    );\n    return (\n      <FormContext.Provider value={dispatch}>\n        <table ref={ref} className={\"lanes\"} style={style}>\n          <tbody>\n            {direction === \"column\" ? (\n              <tr>\n                {cellData.lanes?.map((lane, index) => {\n                  return (\n                    <Lane\n                      key={cellData.id + \"-\" + index}\n                      direction={direction}\n                      cellDataList={lane.cellDataList}\n                      location={{\n                        parentId: cellData.id,\n                        laneIndex: index,\n                      }}\n                    />\n                  );\n                })}\n              </tr>\n            ) : (\n              <>\n                {cellData.lanes?.map((lane, index) => {\n                  return (\n                    <tr key={cellData.id + \"-\" + index}>\n                      <Lane\n                        cellDataList={lane.cellDataList}\n                        direction={direction}\n                        location={{\n                          parentId: cellData.id,\n                          laneIndex: index,\n                        }}\n                      />\n                    </tr>\n                  );\n                })}\n              </>\n            )}\n          </tbody>\n        </table>\n      </FormContext.Provider>\n    );\n  }\n);\n","import { CellData } from \"../../../../../../schemas/CellData\";\n\nexport function getData(cell: CellData) {\n  let result = {};\n  let func = function (data: CellData, result: { [key: string]: any }) {\n    if (data.lanes) {\n      data.lanes.forEach((lane) => {\n        lane.cellDataList.forEach((element) => {\n          switch (element.type) {\n            case \"grid\":\n              func(element, result);\n              break;\n            case \"list\":\n              result[element.id] = [];\n              // @ts-ignore\n              element.lanes.forEach((row, index) => {\n                if (index > 0) {\n                  let rowResult: { [key: string]: any } = {};\n                  row.cellDataList.forEach((listElement: CellData) => {\n                    rowResult[listElement.id] = listElement.value;\n                  });\n                  result[element.id].push(rowResult);\n                }\n              });\n              break;\n            default:\n              result[element.id] = element.value;\n              break;\n          }\n        });\n      });\n    }\n  };\n  func(cell, result);\n  return result;\n}\n\nexport function setValue(cell: CellData, target: CellData, value: any) {\n  let func = function (data: CellData) {\n    if (data.lanes) {\n      for (const lane of data.lanes) {\n        for (const element of lane.cellDataList) {\n          switch (element.type) {\n            case \"grid\":\n              func(element);\n              break;\n            case \"list\":\n              // @ts-ignore\n              for (const row of element.lanes) {\n                for (let i = 0; i < row.cellDataList.length; i++) {\n                  let listElement = row.cellDataList[i];\n                  if (listElement === target) {\n                    listElement.value = value;\n                    return true;\n                  }\n                }\n              }\n              break;\n            default:\n              if (element === target) {\n                element.value = value;\n                return true;\n              }\n              break;\n          }\n        }\n      }\n    }\n    return false;\n  };\n  return func(cell);\n}\n","import React, { forwardRef } from \"react\";\nimport \"./index.css\";\n\ninterface FormGroupProps {\n  layout?: \"inline\" | \"default\";\n  required: boolean;\n  warning?: string | null;\n  warnable: boolean;\n  label: JSX.Element | null;\n  element: JSX.Element;\n}\n\nexport const FormGroup = forwardRef(\n  (\n    {\n      layout = \"default\",\n      required = false,\n      warning = null,\n      warnable = true,\n      label,\n      element,\n    }: FormGroupProps,\n    ref: any\n  ) => {\n    return (\n      <table ref={ref} className={[\"form-group\", layout].join(\" \")}>\n        <tbody>\n          {layout === \"default\" ? (\n            <>\n              <tr>\n                <td className={\"label\"}>\n                  {required ? <span className={\"required\"}>*</span> : <></>}\n                  {label}\n                </td>\n                <td className={\"element\"}>{element}</td>\n              </tr>\n              {warnable ? (\n                <tr>\n                  <td />\n                  <td className={\"warning\"}>\n                    {warning ? <span>{warning}</span> : <span>&nbsp;</span>}\n                  </td>\n                </tr>\n              ) : (\n                <></>\n              )}\n            </>\n          ) : (\n            <>\n              <tr>\n                <td className={\"label\"}>\n                  {required ? <span className={\"required\"}>*</span> : <></>}\n                  {label}\n                </td>\n              </tr>\n              <tr>\n                <td className={\"element\"}>{element}</td>\n              </tr>\n              {warnable ? (\n                <tr>\n                  <td className={\"warning\"}>\n                    {warning ? <span>{warning}</span> : <span>&nbsp;</span>}\n                  </td>\n                </tr>\n              ) : (\n                <></>\n              )}\n            </>\n          )}\n        </tbody>\n      </table>\n    );\n  }\n);\n","import React, { forwardRef } from \"react\";\nimport { Input } from \"antd\";\nimport { FormGroup } from \"../FormGroup\";\nimport { CellData } from \"../../../../schemas/CellData\";\n\ninterface InputCellProps {\n  element: CellData;\n  layout?: \"inline\" | \"default\";\n  dispatch: any;\n}\n\nexport const InputCell = forwardRef(\n  ({ element, layout, dispatch }: InputCellProps, ref: any) => (\n    <>\n      <FormGroup\n        ref={ref}\n        required={element.required!}\n        warning={element.warning}\n        layout={layout}\n        warnable={element.warnable!}\n        label={\n          element.labeled ? (\n            <label title={element.label}>{element.label}</label>\n          ) : (\n            <></>\n          )\n        }\n        element={\n          <Input\n            value={element.value}\n            placeholder={element.placeholder}\n            onChange={(event) => {\n              dispatch({\n                type: \"SET_VALUE\",\n                target: element,\n                value: event.target.value,\n              });\n            }}\n          />\n        }\n      />\n    </>\n  )\n);\n","import React, { forwardRef } from \"react\";\nimport { Pool } from \"./components/Pool\";\nimport { CellData } from \"../../../../schemas/CellData\";\n\ninterface GridCellProps {\n  element: CellData;\n}\n\nexport const GridCell = forwardRef(({ element }: GridCellProps, ref: any) => {\n  return (\n    <>\n      <Pool ref={ref} cellData={element} />\n    </>\n  );\n});\n","import React, { forwardRef } from \"react\";\nimport { CellData } from \"../../../../schemas/CellData\";\nimport { FormGroup } from \"../FormGroup\";\nimport { Select } from \"antd\";\n\nconst { Option } = Select;\n\ninterface SelectCellProps {\n  cellData: CellData;\n  layout?: \"inline\" | \"default\";\n  dispatch: any;\n}\n\nexport const SelectCell = forwardRef(\n  ({ cellData, layout, dispatch }: SelectCellProps, ref: any) => {\n    if (!cellData.options || cellData.options.length === 0) {\n      cellData.options = [\n        {\n          label: \"Joyce\",\n          value: \"1\",\n        },\n        {\n          label: \"Teresa\",\n          value: \"2\",\n        },\n      ];\n    }\n    return (\n      <>\n        <FormGroup\n          ref={ref}\n          required={cellData.required!}\n          warning={cellData.warning}\n          layout={layout}\n          warnable={cellData.warnable!}\n          label={\n            cellData.labeled ? (\n              <label title={cellData.label}>{cellData.label}</label>\n            ) : (\n              <></>\n            )\n          }\n          element={\n            <Select\n              style={{ width: \"100%\" }}\n              onChange={(value) => {\n                dispatch({\n                  type: \"SET_VALUE\",\n                  target: cellData,\n                  value: value,\n                });\n              }}\n            >\n              {cellData.options?.map((option) => (\n                <Option value={option.value}>{option.label}</Option>\n              ))}\n            </Select>\n          }\n        />\n      </>\n    );\n  }\n);\n","import React, { forwardRef } from \"react\";\nimport { Input, DatePicker } from \"antd\";\nimport { FormGroup } from \"../FormGroup\";\nimport { CellData } from \"../../../../schemas/CellData\";\n\ninterface DateCellProps {\n  data: CellData;\n  layout?: \"inline\" | \"default\";\n  dispatch: any;\n}\n\nexport const DateCell = forwardRef(\n  ({ data, layout, dispatch }: DateCellProps, ref: any) => (\n    <>\n      <FormGroup\n        ref={ref}\n        required={data.required!}\n        warning={data.warning}\n        layout={layout}\n        warnable={data.warnable!}\n        label={\n          data.labeled ? <label title={data.label}>{data.label}</label> : <></>\n        }\n        element={\n          <DatePicker\n            style={{ width: \"100%\" }}\n            value={data.value}\n            placeholder={data.placeholder}\n            onChange={(date) => {\n              dispatch({\n                type: \"SET_VALUE\",\n                target: data,\n                value: date,\n              });\n            }}\n          />\n        }\n      />\n    </>\n  )\n);\n","import React, { forwardRef } from \"react\";\nimport { Input } from \"antd\";\nimport { FormGroup } from \"../FormGroup\";\nimport { CellData } from \"../../../../schemas/CellData\";\n\ninterface TextAreaCellProps {\n  element: CellData;\n  layout?: \"inline\" | \"default\";\n  dispatch: any;\n}\n\nconst { TextArea } = Input;\n\nexport const TextAreaCell = forwardRef(\n  ({ element, layout, dispatch }: TextAreaCellProps, ref: any) => (\n    <>\n      <FormGroup\n        ref={ref}\n        required={element.required!}\n        warning={element.warning}\n        layout={layout}\n        warnable={element.warnable!}\n        label={\n          element.labeled ? (\n            <label title={element.label}>{element.label}</label>\n          ) : (\n            <></>\n          )\n        }\n        element={\n          <TextArea\n            rows={4}\n            value={element.value}\n            placeholder={element.placeholder}\n            onChange={(event) => {\n              dispatch({\n                type: \"SET_VALUE\",\n                target: element,\n                value: event.target.value,\n              });\n            }}\n          />\n        }\n      />\n    </>\n  )\n);\n","import React, { useContext, useRef, useState } from \"react\";\nimport { useDrag, useDrop, XYCoord } from \"react-dnd\";\nimport { CellData } from \"../../schemas/CellData\";\nimport { DesignerContext } from \"../../index\";\nimport { FormContext } from \"./components/GridCell/components/Pool\";\nimport { InputCell } from \"./components/InputCell\";\nimport { GridCell } from \"./components/GridCell\";\nimport { SelectCell } from \"./components/SelectCell\";\nimport { createWidgetInstance } from \"../../util\";\nimport { DateCell } from \"./components/DateCell\";\nimport { TextAreaCell } from \"./components/TextAreaCell\";\n\ninterface CellProps {\n  cellData: CellData;\n  layout?: \"inline\" | \"default\";\n  index: number;\n}\n\ninterface DragItem {\n  index: number;\n  id: string;\n  type: string;\n}\n\nexport const Cell = function ({ cellData, index, layout }: CellProps) {\n  const data = {\n    ...cellData,\n    required: false,\n    warnable: false,\n    layout: \"default\",\n    labeled: true,\n  };\n  const ref = useRef<any>(null);\n  const designerDispatch = useContext(DesignerContext);\n  const [dropClassName, setDropClassName] = useState<string>(\"\");\n  const [{ isOver }, drop] = useDrop({\n    accept: [\"instance\", \"input\", \"textarea\", \"select\", \"datetime\", \"grid\"],\n    hover: (item: DragItem, monitor) => {\n      if (!ref.current) {\n        setDropClassName(\"\");\n      }\n      if (!monitor.isOver({ shallow: true })) {\n        setDropClassName(\"\");\n      }\n      if (monitor.getItem().id === cellData.id) {\n        setDropClassName(\"\");\n      }\n      const hoverBoundingRect = ref.current!.getBoundingClientRect();\n      const hoverMiddleY =\n        (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n      const clientOffset = monitor.getClientOffset();\n      if (!clientOffset) {\n        setDropClassName(\"\");\n      }\n      const hoverClientY = (clientOffset as XYCoord).y - hoverBoundingRect.top;\n      setDropClassName(\n        hoverClientY > hoverMiddleY\n          ? \" drop-over-downward\"\n          : \" drop-over-upward\"\n      );\n    },\n    collect: (monitor) => {\n      console.log(cellData.id);\n      return {\n        isOver: monitor.isOver({ shallow: true }),\n      };\n    },\n    drop(item: DragItem, monitor) {\n      if (!ref.current) {\n        return;\n      }\n      if (!monitor.isOver({ shallow: true })) {\n        return;\n      }\n\n      let position = null;\n      const hoverBoundingRect = ref.current!.getBoundingClientRect();\n      const hoverMiddleY =\n        (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n      const clientOffset = monitor.getClientOffset();\n      if (!clientOffset) {\n        return;\n      }\n      const hoverClientY = (clientOffset as XYCoord).y - hoverBoundingRect.top;\n      if (hoverClientY > hoverMiddleY) {\n        position = \"down\";\n      } else {\n        position = \"up\";\n      }\n      if (item.type === \"instance\") {\n        designerDispatch({\n          type: \"MOVE\",\n          dragItemId: monitor.getItem().id,\n          position: position,\n          dropItemId: cellData.id,\n        });\n      } else {\n        designerDispatch({\n          type: \"NOOB\",\n          position: position,\n          dropItemId: cellData.id,\n          dragItem: createWidgetInstance(item.type),\n        });\n      }\n    },\n  });\n\n  const [{ isDragging }, drag] = useDrag({\n    item: { type: \"instance\", id: cellData.id, index },\n    collect: (monitor: any) => ({\n      isDragging: !!monitor.isDragging(),\n    }),\n    begin: (monitor) => {\n      console.log(monitor);\n      designerDispatch({\n        type: \"ACTIVE\",\n        id: cellData.id,\n      });\n    },\n  });\n  drag(drop(ref));\n\n  const dispatch = useContext(FormContext);\n  return (\n    <div\n      ref={ref}\n      style={{ opacity: isDragging ? \"0.5\" : 1 }}\n      className={\n        \"instance\" +\n        (cellData.active ? \" active\" : \"\") +\n        (isOver ? dropClassName : \"\")\n      }\n      onClick={(event) => {\n        event.stopPropagation();\n        designerDispatch({\n          type: \"ACTIVE\",\n          id: cellData.id,\n        });\n        designerDispatch({\n          type: \"EDIT\",\n          id: cellData.id,\n        });\n      }}\n    >\n      {cellData.type === \"input\" ? (\n        <>\n          <InputCell element={data} dispatch={dispatch} layout={layout} />\n        </>\n      ) : cellData.type === \"textarea\" ? (\n        <>\n          <TextAreaCell element={data} dispatch={dispatch} />\n        </>\n      ) : cellData.type === \"grid\" ? (\n        <>\n          <GridCell element={data} />\n        </>\n      ) : cellData.type === \"select\" ? (\n        <>\n          <SelectCell cellData={data} dispatch={dispatch} />\n        </>\n      ) : cellData.type === \"datetime\" ? (\n        <DateCell data={data} dispatch={dispatch} />\n      ) : (\n        <></>\n      )}\n    </div>\n  );\n};\n","import { WidgetData } from \"../components/Designer/schemas/WidgetData\";\nimport {\n  AiOutlineCalendar,\n  AiOutlineCheckSquare,\n  AiOutlineCopy,\n  AiOutlineDownSquare,\n  AiOutlineEdit,\n  AiOutlineMinus,\n  AiOutlineOrderedList,\n  AiOutlineTable,\n} from \"react-icons/ai\";\nimport React from \"react\";\n\nexport const WidgetGroups: { name: string; widgets: WidgetData[] }[] = [\n  {\n    name: \"基础字段\",\n    widgets: [\n      {\n        type: \"input\",\n        icon: <AiOutlineEdit />,\n        name: \"单行文本\",\n        enable: true,\n      },\n      {\n        type: \"textarea\",\n        icon: <AiOutlineEdit />,\n        name: \"多行文本\",\n        enable: true,\n      },\n      {\n        type: \"select\",\n        icon: <AiOutlineDownSquare />,\n        name: \"下拉选择\",\n        enable: true,\n      },\n      {\n        type: \"datetime\",\n        icon: <AiOutlineCalendar />,\n        name: \"日期时间\",\n        enable: true,\n      },\n      {\n        type: \"tree\",\n        icon: <AiOutlineDownSquare />,\n        name: \"级联选择\",\n        enable: false,\n      },\n      {\n        type: \"checkbox\",\n        icon: <AiOutlineCheckSquare />,\n        name: \"多选\",\n        enable: true,\n      },\n      {\n        type: \"checkbox\",\n        icon: <AiOutlineCheckSquare />,\n        name: \"单选\",\n        enable: true,\n      },\n    ],\n  },\n  {\n    name: \"高级字段\",\n    widgets: [\n      { type: \"grid\", icon: <AiOutlineTable />, name: \"布局\", enable: true },\n      {\n        type: \"list\",\n        icon: <AiOutlineOrderedList />,\n        name: \"列表\",\n        enable: true,\n      },\n      {\n        type: \"separator\",\n        icon: <AiOutlineMinus />,\n        name: \"分割线\",\n        enable: false,\n      },\n      { type: \"tab\", icon: <AiOutlineCopy />, name: \"标签页\", enable: false },\n    ],\n  },\n];\n","import React, { Fragment, useCallback, useEffect, useReducer } from \"react\";\nimport { Layout, Button, Space } from \"antd\";\nimport { DndProvider } from \"react-dnd\";\nimport Backend from \"react-dnd-html5-backend\";\nimport { WidgetData } from \"./schemas/WidgetData\";\nimport \"./index.css\";\nimport { Widget } from \"./components/Widget\";\nimport { getActive, reducer } from \"./util\";\nimport { CellData } from \"./schemas/CellData\";\nimport { Cell } from \"./components/Cell\";\nimport { WidgetGroups } from \"../../constants/WidgetGroups\";\n\nconst { Sider, Content, Header } = Layout;\n\nconst rootCellData: CellData = {\n  type: \"grid\",\n  id: \"11270307\",\n  lanes: [{ span: 100, cellDataList: [] }],\n  active: false,\n};\n\nexport const DesignerContext = React.createContext<any>(null);\n\nexport const Designer = function () {\n  const [data, dispatch] = useReducer(reducer, rootCellData);\n  const delFunction = useCallback((event) => {\n    if (event.keyCode === 46) {\n      dispatch({\n        type: \"DELETE_ACTIVE\",\n      });\n    }\n  }, []);\n  useEffect(() => {\n    document.addEventListener(\"keyup\", delFunction, false);\n    return () => {\n      document.removeEventListener(\"keyup\", delFunction, false);\n    };\n  }, [delFunction]);\n\n  return (\n    <>\n      <DesignerContext.Provider value={dispatch}>\n        <DndProvider backend={Backend}>\n          <Layout className={\"layout\"}>\n            <Sider width={280} className={\"left\"}>\n              {WidgetGroups.map((g) => (\n                <Fragment key={g.name}>\n                  <div style={{ color: \"white\" }}>{g.name}</div>\n                  <ul className={\"panel\"}>\n                    {g.widgets.map((w: WidgetData) => {\n                      return <Widget key={w.name} widget={w} />;\n                    })}\n                  </ul>\n                </Fragment>\n              ))}\n            </Sider>\n            <Content>\n              <Layout style={{ height: \"100%\" }}>\n                <Header style={{ padding: 0, textAlign: \"right\" }}>\n                  <Space>\n                    <Button>清空</Button>\n                    <Button>预览</Button>\n                    <Button>保存</Button>\n                  </Space>\n                </Header>\n                <Content className={\"form\"} style={{ height: \"100%\" }}>\n                  <Cell cellData={data} index={0} />\n                </Content>\n              </Layout>\n            </Content>\n            <Sider width={280} className={\"right\"}>\n              {getActive(data)?.id}\n            </Sider>\n          </Layout>\n        </DndProvider>\n      </DesignerContext.Provider>\n    </>\n  );\n};\n","import React from 'react';\r\nimport './App.css';\r\nimport {Designer} from './components/Designer';\r\n\r\nfunction App() {\r\n  return (\r\n      <Designer/>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}