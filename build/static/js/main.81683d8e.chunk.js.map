{"version":3,"sources":["components/DynamicFormDesigner/components/Widget/index.tsx","components/DynamicFormDesigner/util.tsx","components/DynamicFormDesigner/components/DynamicForm/util.ts","components/DynamicFormDesigner/components/DynamicForm/components/Swimlane/index.tsx","components/DynamicFormDesigner/components/DynamicForm/index.tsx","components/DynamicFormDesigner/components/DynamicForm/components/Swimlane/components/Cell/components/FormGroup/index.tsx","components/DynamicFormDesigner/components/DynamicForm/components/Swimlane/components/Cell/components/InputCell/index.tsx","components/DynamicFormDesigner/components/DynamicForm/components/Swimlane/components/Cell/components/GridCell/index.tsx","components/DynamicFormDesigner/components/DynamicForm/components/Swimlane/components/Cell/components/SelectCell/index.tsx","components/DynamicFormDesigner/components/DynamicForm/components/Swimlane/components/Cell/index.tsx","components/DynamicFormDesigner/index.tsx","App.js","serviceWorker.js","index.js"],"names":["Widget","widget","useDrag","item","type","collect","monitor","isDragging","drag","key","name","className","ref","icon","get","rootCellData","parentId","swimlaneIndex","list","func","data","id","swimlanes","cellDataList","swimlane","cellData","copyAndSplice","originData","location","cellDataId","cellId","indexOf","locateById","copy","JSON","parse","stringify","src","cell","find","splice","reducer","state","action","hoverIndex","locateByCellDataListRef","push","dropLocation","root","active","forEach","element","row","listElement","cells","index","i","length","deleteActive","createWidgetInstance","widgetType","Date","getTime","span","label","placeholder","required","options","Swimlane","elements","direction","dispatch","useContext","DynamicFormDesignerContext","useDrop","accept","drop","isOver","getClientOffset","shallow","layout","map","child","DynamicFormContext","React","createContext","DynamicForm","forwardRef","style","useReducer","current","target","value","Provider","FormGroup","warning","warningable","join","InputCell","labeled","title","onChange","event","GridCell","Option","Select","SelectCell","width","option","Cell","useRef","designerDispatch","hover","dragIndex","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","top","clientOffset","hoverClientY","y","onClick","stopPropagation","Sider","Layout","Content","Header","widgetGroup","widgets","enable","DynamicFormDesigner","delFunction","useCallback","keyCode","useEffect","document","addEventListener","removeEventListener","DndProvider","backend","Backend","g","color","w","height","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.81683d8e.chunk.js","sourcesContent":["import React from \"react\";\nimport { WidgetData } from \"../../schemas/WidgetData\";\nimport { useDrag } from \"react-dnd\";\n\ninterface WidgetProps {\n  widget: WidgetData;\n}\n\nexport function Widget({ widget }: WidgetProps) {\n  const [{ isDragging }, drag] = useDrag({\n    item: { type: widget.type },\n    collect: (monitor) => ({\n      isDragging: !!monitor.isDragging(),\n    }),\n  });\n\n  return (\n    <li key={widget.name} className={\"widget\"} ref={drag}>\n      {widget.icon}\n      <span>{widget.name}</span>\n    </li>\n  );\n}\n","import {CellData} from \"./schemas/CellData\";\r\nimport SwimlaneLocation from \"./schemas/SwimlaneLocation\";\r\nimport {active} from \"./components/DynamicForm/util\";\r\n\r\nexport function locateById(rootCellData: CellData, cellDataId: string): SwimlaneLocation | null {\r\n    let location: SwimlaneLocation | null = null;\r\n    let func = function (data: CellData): SwimlaneLocation | null {\r\n        if (data.swimlanes) {\r\n            for (const swimlane of data.swimlanes) {\r\n                for (const cellData of swimlane.cellDataList) {\r\n                    if (cellData.id === cellDataId) {\r\n                        location = {\r\n                            cellId: data.id,\r\n                            swimlaneIndex: data.swimlanes?.indexOf(swimlane)\r\n                        }\r\n                        break;\r\n                    }\r\n                    if (cellData.type === 'grid') {\r\n                        func(cellData);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return location;\r\n    };\r\n    return func(rootCellData);\r\n}\r\n\r\nexport function deleteActive(rootCellData: CellData) {\r\n    let cells: CellData[] | null = null;\r\n    let index: number | null = null;\r\n    let func = function (data: CellData) {\r\n        if (data.swimlanes) {\r\n            for (let swimlane of data.swimlanes) {\r\n                for (let i = 0; i < swimlane.cellDataList.length; i++) {\r\n                    let cell = swimlane.cellDataList[i];\r\n                    if (cell.active) {\r\n                        cells = swimlane.cellDataList;\r\n                        index = i;\r\n                    }\r\n                    if (cell.type === 'grid') {\r\n                        func(cell);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    func(rootCellData);\r\n    if (cells) {\r\n        cells!.splice(index!, 1);\r\n    }\r\n}\r\n\r\nexport function get(rootCellData: CellData, parentId: string, swimlaneIndex: number): CellData[] | null {\r\n    let list: CellData[] | null = null;\r\n    let func = function (data: CellData) {\r\n        if (data.id === parentId) {\r\n            return data.swimlanes![swimlaneIndex].cellDataList;\r\n        }\r\n        if (data.swimlanes) {\r\n            for (const swimlane of data.swimlanes) {\r\n                for (const cellData of swimlane.cellDataList) {\r\n                    if (cellData.type === 'grid') {\r\n                        if (cellData.id === parentId) {\r\n                            list = cellData.swimlanes![swimlaneIndex].cellDataList;\r\n                        } else {\r\n                            func(cellData);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return list;\r\n    };\r\n    return func(rootCellData);\r\n}\r\n\r\nexport function locateByCellDataListRef(rootCellData: CellData, cellDataList: CellData[]): SwimlaneLocation | null {\r\n    let location: SwimlaneLocation | null = null;\r\n    let func = function (data: CellData): SwimlaneLocation | null {\r\n        if (data.swimlanes) {\r\n            for (const swimlane of data.swimlanes) {\r\n                if (swimlane.cellDataList === cellDataList) {\r\n                    location = {\r\n                        cellId: data.id,\r\n                        swimlaneIndex: data.swimlanes.indexOf(swimlane),\r\n                    }\r\n                    break;\r\n                } else {\r\n                    for (const cellData of swimlane.cellDataList) {\r\n                        if (cellData.type === 'grid') {\r\n                            func(cellData);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return location;\r\n    };\r\n    return func(rootCellData);\r\n}\r\n\r\nexport function copyAndSplice(originData: CellData, id: string): [CellData, CellData[], CellData] {\r\n    const location = locateById(originData, id)!;\r\n    const copy = JSON.parse(JSON.stringify(originData));\r\n    const src = get(copy, location.cellId, location.swimlaneIndex)!;\r\n    const cell = src.find(cell => cell.id === id)!;\r\n    src.splice(src.indexOf(cell), 1);\r\n    return [copy, src, cell];\r\n}\r\n\r\nexport function reducer(state: any, action: any) {\r\n    if (action.type === 'MOVE') {\r\n        const [copy, src, cell] = copyAndSplice(state, action.id);\r\n        src.splice(action.hoverIndex, 0, cell);\r\n        return copy;\r\n    } else if (action.type === 'ADD') {\r\n        const location = locateByCellDataListRef(state, action.cellDataList)!;\r\n        const copy = JSON.parse(JSON.stringify(state));\r\n        const cells = get(copy, location.cellId, location.swimlaneIndex)!;\r\n        cells.push(action.cellData);\r\n        return copy;\r\n    } else if (action.type === 'JUMP') {\r\n        const [copy, , cell] = copyAndSplice(state, action.id);\r\n        const dest = get(copy, action.dropLocation.cellId, action.dropLocation.swimlaneIndex)!;\r\n        dest.push(cell);\r\n        return copy;\r\n    } else if (action.type === 'ACTIVE') {\r\n        const copy = JSON.parse(JSON.stringify(state));\r\n        active(copy, action.id);\r\n        return copy;\r\n    } else if (action.type === 'DELETE_ACTIVE') {\r\n        const copy = JSON.parse(JSON.stringify(state));\r\n        deleteActive(copy);\r\n        return copy;\r\n    } else {\r\n        return state;\r\n    }\r\n}\r\n","import { CellData } from \"../../schemas/CellData\";\n\nexport function getData(cell: CellData) {\n  let result = {};\n  let func = function (data: CellData, result: { [key: string]: any }) {\n    if (data.swimlanes) {\n      data.swimlanes.forEach((swimlane) => {\n        swimlane.cellDataList.forEach((element) => {\n          switch (element.type) {\n            case \"grid\":\n              func(element, result);\n              break;\n            case \"list\":\n              result[element.id] = [];\n              // @ts-ignore\n              element.swimlanes.forEach((row, index) => {\n                if (index > 0) {\n                  let rowResult: { [key: string]: any } = {};\n                  row.cellDataList.forEach((listElement: CellData) => {\n                    rowResult[listElement.id] = listElement.value;\n                  });\n                  result[element.id].push(rowResult);\n                }\n              });\n              break;\n            default:\n              result[element.id] = element.value;\n              break;\n          }\n        });\n      });\n    }\n  };\n  func(cell, result);\n  return result;\n}\n\nexport function active(root: CellData, id: string) {\n  let func = function (data: CellData) {\n    data.active = data.id === id;\n    if (data.swimlanes) {\n      data.swimlanes.forEach((swimlane) => {\n        swimlane.cellDataList.forEach((element) => {\n          switch (element.type) {\n            case \"grid\":\n              func(element);\n              break;\n            case \"list\":\n              element.swimlanes!.forEach((row) => {\n                row.cellDataList.forEach((listElement: CellData) => {\n                  listElement.active = listElement.id === id;\n                });\n              });\n              break;\n            default:\n              element.active = element.id === id;\n              break;\n          }\n        });\n      });\n    }\n  };\n  func(root);\n}\n\nexport function setValue(cell: CellData, target: CellData, value: any) {\n  let func = function (data: CellData) {\n    if (data.swimlanes) {\n      for (const swimlane of data.swimlanes) {\n        for (const element of swimlane.cellDataList) {\n          switch (element.type) {\n            case \"grid\":\n              func(element);\n              break;\n            case \"list\":\n              // @ts-ignore\n              for (const row of element.swimlanes) {\n                for (let i = 0; i < row.cellDataList.length; i++) {\n                  let listElement = row.cellDataList[i];\n                  if (listElement === target) {\n                    listElement.value = value;\n                    return true;\n                  }\n                }\n              }\n              break;\n            default:\n              if (element === target) {\n                element.value = value;\n                return true;\n              }\n              break;\n          }\n        }\n      }\n    }\n    return false;\n  };\n  return func(cell);\n}\n","import { Cell } from \"./components/Cell\";\nimport React, { useContext } from \"react\";\nimport { CellData } from \"../../../../schemas/CellData\";\nimport { useDrop } from \"react-dnd\";\nimport { DynamicFormDesignerContext } from \"../../../../index\";\nimport SwimlaneLocation from \"../../../../schemas/SwimlaneLocation\";\n\ninterface SwimlaneProps {\n  elements: CellData[];\n  direction: \"column\" | \"row\";\n  location: SwimlaneLocation;\n}\n\nfunction createWidgetInstance(widgetType: string) {\n  let element: CellData = {\n    type: widgetType,\n    id: widgetType + new Date().getTime(),\n    active: false,\n  };\n  if (element.type === \"grid\") {\n    element.swimlanes = [\n      { span: 50, cellDataList: [] },\n      { span: 50, cellDataList: [] },\n    ];\n  } else if (element.type === \"input\") {\n    element.label = \"单行文本\";\n    element.placeholder = \"请填写\";\n    element.required = false;\n  } else if (element.type === \"textarea\") {\n    element.label = \"多行文本\";\n    element.placeholder = \"请填写\";\n    element.required = false;\n  } else if (element.type === \"dropdown\") {\n    element.label = \"下拉选择\";\n    element.placeholder = \"请选择\";\n    element.options = [];\n    element.required = false;\n  } else if (element.type === \"list\") {\n    element.label = \"列表\";\n    element.swimlanes = [{ cellDataList: [], span: 100 }];\n  } else if (element.type === \"datetime\") {\n    element.label = \"日期时间\";\n    element.placeholder = \"请选择\";\n    element.required = false;\n  } else if (element.type === \"checkbox\") {\n    element.label = \"多选\";\n    element.options = [];\n    element.required = false;\n  } else if (element.type === \"radio\") {\n    element.label = \"单选\";\n    element.options = [];\n    element.required = false;\n  }\n  return element;\n}\n\nexport const Swimlane = function ({\n  elements,\n  direction,\n  location,\n}: SwimlaneProps) {\n  const dispatch = useContext(DynamicFormDesignerContext);\n  const [{ isOver }, drop] = useDrop({\n    accept: [\"input\", \"grid\", \"dropdown\", \"instance\"],\n    drop: (item: any, monitor) => {\n      if (isOver) {\n        const clientOffset = monitor.getClientOffset();\n        if (!clientOffset) {\n          return;\n        }\n        if (item.type === \"instance\") {\n          dispatch({\n            type: \"JUMP\",\n            dropLocation: location,\n            id: item.id,\n          });\n        } else {\n          dispatch({\n            type: \"ADD\",\n            cellData: createWidgetInstance(item.type as string),\n            cellDataList: elements,\n          });\n        }\n      }\n    },\n    collect: (monitor) => {\n      let isOver = monitor.isOver({ shallow: true });\n      return { isOver: isOver };\n    },\n  });\n\n  const layout = direction === \"column\" ? \"default\" : \"inline\";\n  const cells = elements.map((child, index) => (\n    <Cell key={child.id} layout={layout} cellData={child} index={index} />\n  ));\n\n  return (\n    <td\n      className={\"swimlane \" + direction + (isOver ? \" hovered\" : \"\")}\n      ref={drop}\n    >\n      {cells}\n    </td>\n  );\n};\n","import React, { CSSProperties, forwardRef, useReducer } from \"react\";\nimport { setValue } from \"./util\";\nimport \"./index.css\";\nimport { Swimlane } from \"./components/Swimlane\";\nimport { CellData } from \"../../schemas/CellData\";\n\ninterface DynamicFormProps {\n  direction?: \"column\" | \"row\";\n  cellData: CellData;\n  style?: CSSProperties;\n}\n\nexport const DynamicFormContext = React.createContext<any>(null);\n\nexport const DynamicForm = forwardRef(\n  ({ direction = \"column\", cellData, style }: DynamicFormProps, ref: any) => {\n    const [, dispatch] = useReducer(\n      function (state: any, action: any) {\n        switch (action.type) {\n          case \"SET_CURRENT\":\n            return { ...state, current: action.element };\n          case \"SET_VALUE\":\n            setValue(state.data, action.target, action.value);\n            return { ...state };\n          default:\n            return state;\n        }\n      },\n      { current: null, data: cellData }\n    );\n    return (\n      <DynamicFormContext.Provider value={dispatch}>\n        <table ref={ref} className={\"swimlanes\"} style={style}>\n          <tbody>\n            {direction === \"column\" ? (\n              <tr>\n                {cellData.swimlanes?.map((swimlane, index) => {\n                  return (\n                    <Swimlane\n                      key={cellData.id + \"-\" + index}\n                      direction={direction}\n                      elements={swimlane.cellDataList}\n                      location={{ cellId: cellData.id, swimlaneIndex: index }}\n                    />\n                  );\n                })}\n              </tr>\n            ) : (\n              <>\n                {cellData.swimlanes?.map((swimlane, index) => {\n                  return (\n                    <tr key={cellData.id + \"-\" + index}>\n                      <Swimlane\n                        elements={swimlane.cellDataList}\n                        direction={direction}\n                        location={{ cellId: cellData.id, swimlaneIndex: index }}\n                      />\n                    </tr>\n                  );\n                })}\n              </>\n            )}\n          </tbody>\n        </table>\n      </DynamicFormContext.Provider>\n    );\n  }\n);\n","import React, { forwardRef } from \"react\";\nimport \"./index.css\";\n\ninterface FormGroupProps {\n  layout?: \"inline\" | \"default\";\n  required: boolean;\n  warning?: string | null;\n  warningable: boolean;\n  label: JSX.Element | null;\n  element: JSX.Element;\n}\n\nexport const FormGroup = forwardRef(\n  (\n    {\n      layout = \"default\",\n      required = false,\n      warning = null,\n      warningable = true,\n      label,\n      element,\n    }: FormGroupProps,\n    ref: any\n  ) => {\n    return (\n      <table ref={ref} className={[\"form-group\", layout].join(\" \")}>\n        <tbody>\n          {layout === \"default\" ? (\n            <>\n              <tr>\n                <td className={\"label\"}>\n                  {required ? <span className={\"required\"}>*</span> : <></>}\n                  {label}\n                </td>\n                <td>{element}</td>\n              </tr>\n              {warningable ? (\n                <tr>\n                  <td />\n                  <td className={\"warning\"}>\n                    {warning ? <span>{warning}</span> : <span>&nbsp;</span>}\n                  </td>\n                </tr>\n              ) : (\n                <></>\n              )}\n            </>\n          ) : (\n            <>\n              <tr>\n                <td className={\"label\"}>\n                  {required ? <span className={\"required\"}>*</span> : <></>}\n                  {label}\n                </td>\n              </tr>\n              <tr>\n                <td>{element}</td>\n              </tr>\n              {warningable ? (\n                <tr>\n                  <td className={\"warning\"}>\n                    {warning ? <span>{warning}</span> : <span>&nbsp;</span>}\n                  </td>\n                </tr>\n              ) : (\n                <></>\n              )}\n            </>\n          )}\n        </tbody>\n      </table>\n    );\n  }\n);\n","import React, { forwardRef } from \"react\";\nimport { Input } from \"antd\";\nimport { FormGroup } from \"../FormGroup\";\nimport { CellData } from \"../../../../../../../../schemas/CellData\";\n\ninterface InputCellProps {\n  element: CellData;\n  layout?: \"inline\" | \"default\";\n  dispatch: any;\n}\n\nexport const InputCell = forwardRef(\n  ({ element, layout, dispatch }: InputCellProps, ref: any) => (\n    <>\n      <FormGroup\n        ref={ref}\n        required={element.required!}\n        warning={element.warning}\n        layout={layout}\n        warningable={element.warningable!}\n        label={\n          element.labeled ? (\n            <label title={element.label}>{element.label}</label>\n          ) : (\n            <></>\n          )\n        }\n        element={\n          <Input\n            value={element.value}\n            placeholder={element.placeholder}\n            onChange={(event) => {\n              dispatch({\n                type: \"SET_VALUE\",\n                target: element,\n                value: event.target.value,\n              });\n            }}\n          />\n        }\n      />\n    </>\n  )\n);\n","import React, { forwardRef } from \"react\";\nimport { DynamicForm } from \"../../../../../../index\";\nimport { CellData } from \"../../../../../../../../schemas/CellData\";\n\ninterface GridCellProps {\n  element: CellData;\n}\n\nexport const GridCell = forwardRef(({ element }: GridCellProps, ref: any) => {\n  return (\n    <>\n      <DynamicForm ref={ref} cellData={element} />\n    </>\n  );\n});\n","import React, { forwardRef } from \"react\";\nimport { CellData } from \"../../../../../../../../schemas/CellData\";\nimport { FormGroup } from \"../FormGroup\";\nimport { Select } from \"antd\";\n\nconst { Option } = Select;\n\ninterface SelectCellProps {\n  cellData: CellData;\n  layout?: \"inline\" | \"default\";\n  dispatch: any;\n}\n\nexport const SelectCell = forwardRef(\n  ({ cellData, layout, dispatch }: SelectCellProps, ref: any) => {\n    if (!cellData.options || cellData.options.length === 0) {\n      cellData.options = [\n        {\n          label: \"Joyce\",\n          value: \"1\",\n        },\n        {\n          label: \"Teresa\",\n          value: \"2\",\n        },\n      ];\n    }\n    return (\n      <>\n        <FormGroup\n          ref={ref}\n          required={cellData.required!}\n          warning={cellData.warning}\n          layout={layout}\n          warningable={cellData.warningable!}\n          label={\n            cellData.labeled ? (\n              <label title={cellData.label}>{cellData.label}</label>\n            ) : (\n              <></>\n            )\n          }\n          element={\n            <Select\n              style={{ width: \"100%\" }}\n              onChange={(value) => {\n                dispatch({\n                  type: \"SET_VALUE\",\n                  target: cellData,\n                  value: value,\n                });\n              }}\n            >\n              {cellData.options?.map((option) => (\n                <Option value={option.value}>{option.label}</Option>\n              ))}\n            </Select>\n          }\n        />\n      </>\n    );\n  }\n);\n","import React, {useContext, useRef} from \"react\";\r\nimport {useDrag, useDrop, XYCoord} from \"react-dnd\";\r\nimport {CellData} from \"../../../../../../schemas/CellData\";\r\nimport {DynamicFormDesignerContext} from \"../../../../../../index\";\r\nimport {DynamicFormContext} from \"../../../../index\";\r\nimport {InputCell} from \"./components/InputCell\";\r\nimport {GridCell} from \"./components/GridCell\";\r\nimport {SelectCell} from \"./components/SelectCell\";\r\n\r\ninterface CellProps {\r\n    cellData: CellData;\r\n    layout?: 'inline' | 'default';\r\n    index: number;\r\n}\r\n\r\ninterface DragItem {\r\n    index: number;\r\n    id: string;\r\n    type: string;\r\n}\r\n\r\nexport const Cell = function ({cellData, index, layout}: CellProps) {\r\n    const data = {\r\n        ...cellData,\r\n        required: false,\r\n        warningable: false,\r\n        layout: 'default',\r\n        labeled: true\r\n    };\r\n    const ref = useRef<any>(null);\r\n    const designerDispatch = useContext(DynamicFormDesignerContext);\r\n    const [, drop] = useDrop({\r\n        accept: ['instance'],\r\n        hover(item: DragItem, monitor) {\r\n            if (!ref.current) {\r\n                return;\r\n            }\r\n\r\n            const dragIndex = item.index;\r\n            const hoverIndex = index;\r\n\r\n            if (dragIndex === hoverIndex) {\r\n                return;\r\n            }\r\n\r\n            const hoverBoundingRect = ref.current!.getBoundingClientRect();\r\n            const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\r\n            const clientOffset = monitor.getClientOffset();\r\n            if (!clientOffset) {\r\n                return;\r\n            }\r\n            const hoverClientY = (clientOffset as XYCoord).y - hoverBoundingRect.top;\r\n            if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\r\n                return;\r\n            }\r\n            if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\r\n                return;\r\n            }\r\n            designerDispatch({\r\n                type: 'MOVE',\r\n                hoverIndex: hoverIndex,\r\n                id: item.id\r\n            });\r\n            item.index = hoverIndex;\r\n        },\r\n    });\r\n\r\n    const [, drag] = useDrag({\r\n        item: {type: 'instance', id: cellData.id, index},\r\n        collect: (monitor: any) => ({\r\n            isDragging: monitor.isDragging(),\r\n        }),\r\n    });\r\n    drag(drop(ref));\r\n\r\n    const dispatch = useContext(DynamicFormContext);\r\n    return <div ref={ref} className={'instance' + (cellData.active ? ' active' : '')}\r\n                onClick={(event) => {\r\n                    event.stopPropagation();\r\n                    designerDispatch({\r\n                        type: 'ACTIVE',\r\n                        id: cellData.id,\r\n                    });\r\n                }}>{\r\n        cellData.type === 'input' ? <>\r\n            <span className={'id'}>{data.id}</span>\r\n            <InputCell element={data} dispatch={dispatch} layout={layout}/>\r\n        </> : (\r\n            cellData.type === 'grid' ? <>\r\n                <span className={'id'}>{data.id}</span>\r\n                <GridCell element={data}/>\r\n            </> : (\r\n                cellData.type === 'dropdown' ? <>\r\n                    <SelectCell cellData={data} dispatch={dispatch}/>\r\n                </> : <></>\r\n            )\r\n        )\r\n    }</div>;\r\n}","import React, { Fragment, useCallback, useEffect, useReducer } from \"react\";\nimport { Layout, Button, Space } from \"antd\";\nimport { DndProvider } from \"react-dnd\";\nimport Backend from \"react-dnd-html5-backend\";\nimport {\n  AiOutlineCalendar,\n  AiOutlineCheckSquare,\n  AiOutlineCopy,\n  AiOutlineDownSquare,\n  AiOutlineEdit,\n  AiOutlineMinus,\n  AiOutlineOrderedList,\n  AiOutlineTable,\n} from \"react-icons/ai\";\nimport { WidgetData } from \"./schemas/WidgetData\";\nimport \"./index.css\";\nimport { Widget } from \"./components/Widget\";\nimport { reducer } from \"./util\";\nimport { CellData } from \"./schemas/CellData\";\nimport { Cell } from \"./components/DynamicForm/components/Swimlane/components/Cell\";\n\nconst { Sider, Content, Header } = Layout;\n\nconst rootCellData: CellData = {\n  type: \"grid\",\n  id: \"11270307\",\n  swimlanes: [{ span: 100, cellDataList: [] }],\n  active: false,\n};\n\nconst widgetGroup: { name: string; widgets: WidgetData[] }[] = [\n  {\n    name: \"基础字段\",\n    widgets: [\n      {\n        type: \"input\",\n        icon: <AiOutlineEdit />,\n        name: \"单行文本\",\n        enable: true,\n      },\n      {\n        type: \"textarea\",\n        icon: <AiOutlineEdit />,\n        name: \"多行文本\",\n        enable: true,\n      },\n      {\n        type: \"dropdown\",\n        icon: <AiOutlineDownSquare />,\n        name: \"下拉选择\",\n        enable: true,\n      },\n      {\n        type: \"datetime\",\n        icon: <AiOutlineCalendar />,\n        name: \"日期时间\",\n        enable: true,\n      },\n      {\n        type: \"tree\",\n        icon: <AiOutlineDownSquare />,\n        name: \"级联选择\",\n        enable: false,\n      },\n      {\n        type: \"checkbox\",\n        icon: <AiOutlineCheckSquare />,\n        name: \"多选\",\n        enable: true,\n      },\n      {\n        type: \"checkbox\",\n        icon: <AiOutlineCheckSquare />,\n        name: \"单选\",\n        enable: true,\n      },\n    ],\n  },\n  {\n    name: \"高级字段\",\n    widgets: [\n      { type: \"grid\", icon: <AiOutlineTable />, name: \"布局\", enable: true },\n      {\n        type: \"list\",\n        icon: <AiOutlineOrderedList />,\n        name: \"列表\",\n        enable: true,\n      },\n      {\n        type: \"separator\",\n        icon: <AiOutlineMinus />,\n        name: \"分割线\",\n        enable: false,\n      },\n      { type: \"tab\", icon: <AiOutlineCopy />, name: \"标签页\", enable: false },\n    ],\n  },\n];\n\nexport const DynamicFormDesignerContext = React.createContext<any>(null);\n\nexport const DynamicFormDesigner = function () {\n  const [data, dispatch] = useReducer(reducer, rootCellData);\n  const delFunction = useCallback((event) => {\n    if (event.keyCode === 46) {\n      dispatch({\n        type: \"DELETE_ACTIVE\",\n      });\n    }\n  }, []);\n  useEffect(() => {\n    document.addEventListener(\"keyup\", delFunction, false);\n    return () => {\n      document.removeEventListener(\"keyup\", delFunction, false);\n    };\n  }, []);\n\n  return (\n    <>\n      <DynamicFormDesignerContext.Provider value={dispatch}>\n        <DndProvider backend={Backend}>\n          <Layout className={\"layout\"}>\n            <Sider width={280} className={\"left\"}>\n              {widgetGroup.map((g) => (\n                <Fragment key={g.name}>\n                  <div style={{ color: \"white\" }}>{g.name}</div>\n                  <ul className={\"panel\"}>\n                    {g.widgets.map((w: WidgetData) => {\n                      return <Widget key={w.name} widget={w} />;\n                    })}\n                  </ul>\n                </Fragment>\n              ))}\n            </Sider>\n            <Content>\n              <Layout style={{ height: \"100%\" }}>\n                <Header>\n                  <Space>\n                    <Button>清空</Button>\n                    <Button>预览</Button>\n                    <Button>保存</Button>\n                  </Space>\n                </Header>\n                <Content className={\"form\"} style={{ height: \"100%\" }}>\n                  <Cell cellData={data} index={0} />\n                </Content>\n              </Layout>\n            </Content>\n            <Sider width={280} className={\"right\"} />\n          </Layout>\n        </DndProvider>\n      </DynamicFormDesignerContext.Provider>\n    </>\n  );\n};\n","import React from 'react';\r\nimport './App.css';\r\nimport {DynamicFormDesigner} from './components/DynamicFormDesigner';\r\n\r\nfunction App() {\r\n  return (\r\n      <DynamicFormDesigner/>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}