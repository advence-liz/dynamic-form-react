{"version":3,"sources":["components/Designer/util.tsx","components/Designer/components/GridCell/components/Pool/util.ts","constants/WidgetGroups.tsx","components/Instance.tsx","components/Designer/components/FormGroup/index.tsx","components/Designer/components/InputCell.tsx","components/Designer/components/GridCell/components/Pool/components/Lane.tsx","components/Designer/components/GridCell/components/Pool/components/DndLane.tsx","components/Designer/components/GridCell/components/Pool/index.tsx","components/Designer/components/GridCell/index.tsx","components/Designer/components/SelectCell.tsx","components/Designer/components/DateCell.tsx","components/Designer/components/CheckboxCell.tsx","components/Designer/components/LabelCell.tsx","components/Designer/components/Cell.tsx","components/Designer/components/DnDCell.tsx","components/Designer/components/GridCellConfig/components/LaneConfig.tsx","components/Designer/components/GridCellConfig/index.tsx","components/Designer/components/InputCellConfig.tsx","components/Designer/components/DateCellConfig.tsx","components/Designer/components/SelectCellConfig/components/OptionConfig.tsx","components/Designer/components/SelectCellConfig/index.tsx","components/Designer/components/Widget.tsx","components/Designer/components/WidgetGroup.tsx","components/Designer/components/CheckboxCellConfig/index.tsx","components/Designer/components/LabelCellConfig.tsx","components/TextAreaCell.tsx","components/TextAreaCellConfig.tsx","components/Layout.tsx","components/Designer/index.tsx","App.js","serviceWorker.js","index.js"],"names":["cloneAndForEach","root","handler","copy","JSON","parse","stringify","forEach","recursion","data","lanes","lane","i","cellDataList","length","cellData","type","locate","matchFunc","location","func","parentId","id","laneIndex","indexOf","index","getCellDataList","list","drop","cell","dropItemId","position","item","dropLocation","dropList","splice","active","reducer","state","action","dragLocation","dragList","dragCell","dragItem","push","rootCellData","undefined","cellLocation","deleteActive","target","value","element","row","listElement","setValue","required","warning","label","warnable","createWidgetInstance","Date","getTime","span","placeholder","options","WidgetGroups","name","widgets","icon","InstanceContext","React","createContext","forwardRef","ref","customCells","useReducer","innerData","dispatch","useImperativeHandle","getData","result","rowResult","validate","Provider","Cell","className","FormGroup","layout","instanceDispatch","useContext","join","InputCell","labeled","title","disabled","onChange","event","Lane","direction","cells","map","child","key","style","width","height","DndLane","DesignerContext","useDrop","accept","monitor","isOver","getClientOffset","collect","shallow","getItem","InstanceListHeaderItem","styled","Col","Pool","isDesigner","getLane","onClick","update","$push","$apply","x","y","GridCell","Option","Select","SelectCell","option","DateCell","date","Group","checkedValues","console","log","LabelCell","padding","lineHeight","CheckboxCell","some","createElement","filter","DnDCell","useRef","designerDispatch","useState","dropClassName","setDropClassName","hover","current","hoverBoundingRect","getBoundingClientRect","coord","hoverMiddleY","bottom","top","hoverClientY","hoverMiddleX","right","left","hoverClientX","clientOffset","useDrag","isDragging","begin","drag","stopPropagation","opacity","LaneConfig","move","onRemove","onResize","dragIndex","hoverIndex","cursor","size","margin","GridCellConfig","labelCol","Item","$set","$splice","from","to","InputCellConfig","checked","defaultValue","Text","Typography","DateCellConfig","defaultValueOptions","text","currentDefaultValueOptions","setCurrentDefaultValueOptions","onSearch","searchText","search","RegExp","OptionConfig","SelectCellConfig","StyledLi","li","Widget","widget","listStyle","w","CheckboxCellConfig","LabelCellConfig","TextArea","Input","TextAreaCell","rows","TextAreaCellConfig","Header","Layout","Sider","Content","WhiteLayout","WhiteHeader","WhiteSider","WhiteContent","RootCell","props","LeftSider","attrs","RightSider","FullHeightLayout","ToolBar","Designer","config","previewDialogVisible","setPreviewDialogVisible","previewData","setPreviewData","previewRef","delFunction","useCallback","keyCode","useEffect","document","addEventListener","removeEventListener","getActive","DndProvider","backend","Backend","g","WidgetGroup","visible","onCancel","footer","alert","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.976f9663.chunk.js","sourcesContent":["import { CellData } from \"./schemas/CellData\";\nimport CellLocation from \"./schemas/CellLocation\";\nimport { setValue } from \"./components/GridCell/components/Pool/util\";\nimport {\n  DispatchActiveProps,\n  DispatchAddProps,\n  DispatchDeleteActiveProps,\n  DispatchEditProps,\n  DispatchInitProps,\n  DispatchMoveProps,\n  DispatchPositionedAddProps,\n  DispatchPositionedMove,\n  DispatchSetValueProps,\n  DispatchUpdateProps,\n  DispatchValidateProps,\n} from \"./schemas/ReducerAction\";\n\n/**\n * Clone and iterate nested CellData\n * @param root\n * @param handler\n */\nexport function cloneAndForEach(\n  root: CellData,\n  handler: (\n    value: CellData,\n    index: number | null,\n    array: CellData[] | null\n  ) => void\n): CellData {\n  const copy = JSON.parse(JSON.stringify(root));\n  forEach(copy, handler);\n  return copy;\n}\n\n/**\n * Iterate nested CellData\n * @param root\n * @param handler\n */\nexport function forEach(\n  root: CellData,\n  handler: (\n    value: CellData,\n    index: number | null,\n    array: CellData[] | null\n  ) => void\n): void {\n  let recursion = function (data: CellData): void {\n    if (data.lanes) {\n      for (const lane of data.lanes) {\n        for (let i = 0; i < lane.cellDataList.length; i++) {\n          let cellData = lane.cellDataList[i];\n          handler(cellData, i, lane.cellDataList);\n          if (cellData.type === \"grid\" || cellData.type === \"list\") {\n            recursion(cellData);\n          }\n        }\n      }\n    }\n  };\n  handler(root, null, null);\n  recursion(root);\n}\n\nexport function locate(\n  root: CellData,\n  matchFunc: (value: CellData, index: number, array: CellData[]) => boolean\n): [CellLocation, CellData[], CellData] | null {\n  let location: [CellLocation, CellData[], CellData] | null = null;\n  let func = function (\n    data: CellData\n  ): [CellLocation, CellData[], CellData] | null {\n    if (data.lanes) {\n      for (const lane of data.lanes) {\n        for (let i = 0; i < lane.cellDataList.length; i++) {\n          let cellData = lane.cellDataList[i];\n          if (matchFunc(cellData, i, lane.cellDataList)) {\n            location = [\n              {\n                parentId: data.id,\n                laneIndex: data.lanes?.indexOf(lane),\n                index: i,\n              },\n              lane.cellDataList,\n              cellData,\n            ];\n            break;\n          }\n          if (cellData.type === \"grid\" || cellData.type === \"list\") {\n            func(cellData);\n          }\n        }\n      }\n    }\n    return location;\n  };\n  return func(root);\n}\n\nexport function deleteActive(rootCellData: CellData) {\n  const location = locate(\n    rootCellData,\n    (item) => item.active !== undefined && item.active\n  );\n  if (location) {\n    const [cellLocation, list] = location;\n    list.splice(cellLocation.index, 1);\n  }\n}\n\nexport function getCellDataList(\n  root: CellData,\n  parentId: string,\n  index: number\n): CellData[] | null {\n  let list: CellData[] | null = null;\n  let func = function (data: CellData) {\n    if (data.id === parentId) {\n      return data.lanes![index].cellDataList;\n    }\n    if (data.lanes) {\n      for (const lane of data.lanes) {\n        for (const cellData of lane.cellDataList) {\n          if (cellData.type === \"grid\" || cellData.type === \"list\") {\n            if (cellData.id === parentId) {\n              list = cellData.lanes![index].cellDataList;\n            } else {\n              func(cellData);\n            }\n          }\n        }\n      }\n    }\n    return list;\n  };\n  return func(root);\n}\n\nfunction drop(\n  root: CellData,\n  cell: CellData,\n  dropItemId: string,\n  position: string\n) {\n  const [dropLocation, dropList] = locate(\n    root,\n    (item) => item.id === dropItemId\n  )!;\n  if (position === \"up\") {\n    dropList.splice(dropLocation.index, 0, cell);\n  } else {\n    dropList.splice(dropLocation.index + 1, 0, cell);\n  }\n  active(root, cell.id);\n}\nexport function reducer(\n  state: any,\n  action:\n    | DispatchPositionedMove\n    | DispatchPositionedAddProps\n    | DispatchActiveProps\n    | DispatchEditProps\n    | DispatchMoveProps\n    | DispatchAddProps\n    | DispatchUpdateProps\n    | DispatchDeleteActiveProps\n    | DispatchSetValueProps\n    | DispatchValidateProps\n    | DispatchInitProps\n): CellData {\n  if (!action.type) {\n    return state;\n  }\n  if (action.type === \"INIT\") {\n    return action.data;\n  }\n  const copy = JSON.parse(JSON.stringify(state));\n  if (action.type === \"POSITIONED_MOVE\") {\n    const [dragLocation, dragList, dragCell] = locate(\n      copy,\n      (item) => item.id === action.id\n    )!;\n    dragList.splice(dragLocation.index, 1);\n    drop(copy, dragCell, action.dropItemId, action.position);\n  } else if (action.type === \"POSITIONED_ADD\") {\n    drop(copy, action.dragItem, action.dropItemId, action.position);\n  } else if (action.type === \"ADD\") {\n    const cells = getCellDataList(\n      copy,\n      action.location.parentId,\n      action.location.index\n    )!;\n    cells.push(action.dragItem);\n    active(copy, action.dragItem.id);\n  } else if (action.type === \"UPDATE\") {\n    const [location, list] = locate(\n      copy,\n      (data) => data.id === action.data.id\n    )!;\n    list.splice(location.index, 1, action.data);\n  } else if (action.type === \"MOVE\") {\n    const [location, list, cell] = locate(\n      copy,\n      (item) => item.id === action.id\n    )!;\n    list.splice(location.index, 1);\n    const cellDataList = getCellDataList(\n      copy,\n      action.location.parentId,\n      action.location.index\n    );\n    cellDataList?.push(cell);\n    active(copy, cell.id);\n  } else if (action.type === \"ACTIVE\") {\n    active(copy, action.id);\n  } else if (action.type === \"DELETE_ACTIVE\") {\n    deleteActive(copy);\n  } else if (action.type === \"SET_VALUE\") {\n    setValue(copy, action.target, action.value);\n  } else if (action.type === \"VALIDATE\") {\n    return cloneAndForEach(state, function (cellData) {\n      if (cellData.required && !cellData.value) {\n        cellData.warning = `${cellData.label} is required.`;\n        cellData.warnable = true;\n      } else {\n        cellData.warnable = false;\n        cellData.warning = \"\";\n      }\n    });\n  }\n  return copy;\n}\n\nexport function getActive(root: CellData): CellData | null {\n  const location = locate(\n    root,\n    (item) => item.active !== undefined && item.active\n  );\n  return location ? location[2] : null;\n}\n\nexport function active(root: CellData, id: string) {\n  forEach(root, function (cellData) {\n    cellData.active = id === cellData.id;\n  });\n}\n\nexport function createWidgetInstance(type: string) {\n  let cellData: CellData = {\n    type: type,\n    id: type + new Date().getTime(),\n    active: false,\n  };\n  if (cellData.type === \"grid\") {\n    cellData.lanes = [\n      { span: 12, cellDataList: [] },\n      { span: 12, cellDataList: [] },\n    ];\n  } else if (cellData.type === \"input\") {\n    cellData.label = \"单行文本\";\n    cellData.placeholder = \"请填写\";\n    cellData.required = false;\n  } else if (cellData.type === \"select\") {\n    cellData.label = \"下拉选择\";\n    cellData.placeholder = \"请选择\";\n    cellData.options = [];\n    cellData.required = false;\n  } else if (cellData.type === \"list\") {\n    cellData.label = \"列表\";\n    cellData.lanes = [{ cellDataList: [], span: 100 }];\n  } else if (cellData.type === \"datetime\") {\n    cellData.label = \"日期时间\";\n    cellData.placeholder = \"请选择\";\n    cellData.required = false;\n  } else if (cellData.type === \"checkbox\") {\n    cellData.label = \"多选\";\n    cellData.options = [];\n    cellData.required = false;\n  } else if (cellData.type === \"radio\") {\n    cellData.label = \"单选\";\n    cellData.options = [];\n    cellData.required = false;\n  }\n  return cellData;\n}\n","import { CellData } from \"../../../../schemas/CellData\";\n\nexport function getData(cell: CellData) {\n  let result = {};\n  let func = function (data: CellData, result: { [key: string]: any }) {\n    if (data.lanes) {\n      data.lanes.forEach((lane) => {\n        lane.cellDataList.forEach((element) => {\n          switch (element.type) {\n            case \"grid\":\n              func(element, result);\n              break;\n            case \"list\":\n              result[element.id] = [];\n              element.lanes!.forEach((row, index) => {\n                let rowResult: { [key: string]: any } = {};\n                row.cellDataList.forEach((listElement: CellData) => {\n                  rowResult[listElement.id] = listElement.value;\n                });\n                result[element.id].push(rowResult);\n              });\n              break;\n            default:\n              result[element.id] = element.value;\n              break;\n          }\n        });\n      });\n    }\n  };\n  func(cell, result);\n  return result;\n}\n\nexport function setValue(cell: CellData, target: CellData, value: any) {\n  let func = function (data: CellData) {\n    if (data.lanes) {\n      for (const lane of data.lanes) {\n        for (const element of lane.cellDataList) {\n          switch (element.type) {\n            case \"grid\":\n              func(element);\n              break;\n            case \"list\":\n              // @ts-ignore\n              for (const row of element.lanes) {\n                for (let i = 0; i < row.cellDataList.length; i++) {\n                  let listElement = row.cellDataList[i];\n                  if (listElement.id === target.id) {\n                    listElement.value = value;\n                    return true;\n                  }\n                }\n              }\n              break;\n            default:\n              if (element.id === target.id) {\n                element.value = value;\n                return true;\n              }\n              break;\n          }\n        }\n      }\n    }\n    return false;\n  };\n  return func(cell);\n}\n","import { WidgetData } from \"../components/Designer/schemas/WidgetData\";\nimport {\n  AiOutlineCalendar,\n  AiOutlineCheckSquare,\n  AiOutlineDownSquare,\n  AiOutlineEdit,\n  AiOutlineFontSize,\n  AiOutlineOrderedList,\n  AiOutlineTable,\n} from \"react-icons/ai\";\nimport React from \"react\";\n\nexport const WidgetGroups: { name: string; widgets: WidgetData[] }[] = [\n  {\n    name: \"基础字段\",\n    widgets: [\n      {\n        type: \"input\",\n        icon: <AiOutlineEdit />,\n        name: \"单行文本\",\n      },\n      {\n        type: \"select\",\n        icon: <AiOutlineDownSquare />,\n        name: \"下拉选择\",\n      },\n      {\n        type: \"datetime\",\n        icon: <AiOutlineCalendar />,\n        name: \"日期时间\",\n      },\n      {\n        type: \"checkbox\",\n        icon: <AiOutlineCheckSquare />,\n        name: \"多选\",\n      },\n      {\n        type: \"label\",\n        icon: <AiOutlineFontSize />,\n        name: \"文本\",\n      },\n    ],\n  },\n  {\n    name: \"高级字段\",\n    widgets: [\n      { type: \"grid\", icon: <AiOutlineTable />, name: \"布局\" },\n      {\n        type: \"list\",\n        icon: <AiOutlineOrderedList />,\n        name: \"列表\",\n      },\n    ],\n  },\n];\n","import React, { forwardRef, useImperativeHandle, useReducer } from \"react\";\nimport { Cell, CustomCell } from \"./Designer/components/Cell\";\nimport { reducer } from \"./Designer/util\";\nimport { CellData } from \"./Designer/schemas/CellData\";\nimport { getData } from \"./Designer/components/GridCell/components/Pool/util\";\n\ninterface FormProps {\n  data: CellData;\n  customCells?: CustomCell[];\n}\n\n/**\n * Instance context provides the same utilities with designer context,\n * but also allows user's input\n */\nexport const InstanceContext = React.createContext<any>(null);\nexport default forwardRef(({ data, customCells }: FormProps, ref: any) => {\n  const [innerData, dispatch] = useReducer(reducer, data);\n  useImperativeHandle(ref, () => ({\n    getData: function () {\n      return getData(innerData);\n    },\n    validate: function () {\n      dispatch({\n        type: \"VALIDATE\",\n      });\n    },\n  }));\n  return (\n    <InstanceContext.Provider value={dispatch}>\n      <Cell\n        ref={ref}\n        cellData={innerData}\n        className={\"preview\"}\n        customCells={customCells}\n      />\n    </InstanceContext.Provider>\n  );\n});\n","import React, { forwardRef, useContext } from \"react\";\nimport \"./index.css\";\nimport { InstanceContext } from \"../../../Instance\";\n\ninterface FormGroupProps {\n  layout?: \"vertical\" | \"horizontal\";\n  required?: boolean;\n  warning?: string | null;\n  warnable?: boolean;\n  label?: JSX.Element | null;\n  element: JSX.Element | null;\n}\n\nexport const FormGroup = forwardRef(\n  (\n    {\n      layout = \"horizontal\",\n      required = false,\n      warning = null,\n      warnable = true,\n      label = <></>,\n      element,\n    }: FormGroupProps,\n    ref: any\n  ) => {\n    const instanceDispatch = useContext(InstanceContext);\n    return (\n      <table ref={ref} className={[\"form-group\", layout].join(\" \")}>\n        <tbody>\n          {layout === \"horizontal\" ? (\n            <>\n              <tr>\n                <td className={\"label\"}>\n                  {required ? <span className={\"required\"}>*</span> : <></>}\n                  {label}\n                </td>\n                <td className={\"element\"}>{element}</td>\n              </tr>\n              {warnable ? (\n                <tr>\n                  <td />\n                  <td className={\"warning\"}>\n                    {warning ? <span>{warning}</span> : <span>&nbsp;</span>}\n                  </td>\n                </tr>\n              ) : (\n                <></>\n              )}\n            </>\n          ) : (\n            <>\n              {!instanceDispatch && (\n                <tr>\n                  <td className={\"label\"}>\n                    {required ? <span className={\"required\"}>*</span> : <></>}\n                    {label}\n                  </td>\n                </tr>\n              )}\n              <tr>\n                <td className={\"element\"}>{element}</td>\n              </tr>\n              {warnable ? (\n                <tr>\n                  <td className={\"warning\"}>\n                    {warning ? <span>{warning}</span> : <span>&nbsp;</span>}\n                  </td>\n                </tr>\n              ) : (\n                <></>\n              )}\n            </>\n          )}\n        </tbody>\n      </table>\n    );\n  }\n);\n","import React, { forwardRef } from \"react\";\nimport { Input } from \"antd\";\nimport { CellData } from \"../schemas/CellData\";\nimport { FormGroup } from \"./FormGroup\";\n\ninterface InputCellProps {\n  data: CellData;\n  layout?: \"vertical\" | \"horizontal\";\n  dispatch: any;\n}\n\nexport const InputCell = forwardRef(\n  ({ data, layout, dispatch }: InputCellProps, ref: any) => (\n    <>\n      <FormGroup\n        ref={ref}\n        required={data.required!}\n        warning={data.warning}\n        layout={layout}\n        warnable={data.warnable!}\n        label={\n          data.labeled ? <label title={data.label}>{data.label}</label> : <></>\n        }\n        element={\n          <Input\n            disabled={data.disabled}\n            value={data.value}\n            placeholder={data.placeholder}\n            onChange={(event) => {\n              dispatch &&\n                dispatch({\n                  type: \"SET_VALUE\",\n                  target: data,\n                  value: event.target.value,\n                });\n            }}\n          />\n        }\n      />\n    </>\n  )\n);\n","import React, { forwardRef, useContext } from \"react\";\nimport { CellData } from \"../../../../../schemas/CellData\";\nimport { DnDCell } from \"../../../../DnDCell\";\nimport { Cell, CustomCell } from \"../../../../Cell\";\nimport { InstanceContext } from \"../../../../../../Instance\";\nimport { Col } from \"antd\";\n\ninterface LaneProps {\n  cellDataList: CellData[];\n  direction: \"horizontal\" | \"vertical\";\n  className?: string;\n  span?: number;\n  customCells?: CustomCell[];\n}\n\nexport const Lane = forwardRef(\n  (\n    { cellDataList, direction, className, span, customCells }: LaneProps,\n    ref: any\n  ) => {\n    const instanceDispatch = useContext(InstanceContext);\n    const cells = cellDataList.map((child, index) =>\n      instanceDispatch === null ? (\n        <DnDCell\n          key={child.id}\n          layout={direction}\n          cellData={child}\n          index={index}\n          customCells={customCells}\n        />\n      ) : (\n        <Cell\n          cellData={child}\n          key={child.id}\n          layout={direction}\n          customCells={customCells}\n        />\n      )\n    );\n\n    return (\n      <Col span={span} className={\"lane \" + direction + (className || \"\")}>\n        <div style={{ width: \"100%\", height: \"100%\" }} ref={ref}>\n          {cells}\n        </div>\n      </Col>\n    );\n  }\n);\n","import React, { useContext } from \"react\";\nimport { useDrop } from \"react-dnd\";\nimport { Lane } from \"./Lane\";\nimport { CellData } from \"../../../../../schemas/CellData\";\nimport SwimlaneLocation from \"../../../../../schemas/SwimlaneLocation\";\nimport { DesignerContext } from \"../../../../../index\";\nimport { createWidgetInstance } from \"../../../../../util\";\nimport { CustomCell } from \"../../../../Cell\";\n\ninterface LaneProps {\n  cellDataList: CellData[];\n  direction: \"horizontal\" | \"vertical\";\n  location: SwimlaneLocation;\n  span?: number;\n  customCells?: CustomCell[];\n}\n\nexport const DndLane = function ({\n  cellDataList,\n  direction,\n  location,\n  span,\n  customCells,\n}: LaneProps) {\n  const dispatch = useContext(DesignerContext);\n  const [{ isOver }, drop] = useDrop({\n    accept: [\n      \"input\",\n      \"grid\",\n      \"select\",\n      \"datetime\",\n      \"checkbox\",\n      \"list\",\n      \"instance\",\n      \"label\",\n      ...(customCells || []).map((item) => item.type),\n    ],\n    drop: (item: any, monitor) => {\n      if (isOver) {\n        const clientOffset = monitor.getClientOffset();\n        if (!clientOffset) {\n          return;\n        }\n\n        if (item.type === \"instance\") {\n          dispatch({\n            type: \"MOVE\",\n            id: item.id,\n            location: location,\n          });\n        } else {\n          dispatch({\n            type: \"ADD\",\n            dragItem: createWidgetInstance(item.type),\n            location: location,\n          });\n        }\n      }\n    },\n    collect: (monitor) => {\n      let isOver = monitor.isOver({ shallow: true });\n      if (isOver && monitor.getItem().id === location.parentId) {\n        isOver = false;\n      }\n      return { isOver: isOver };\n    },\n  });\n  return (\n    <Lane\n      span={span}\n      cellDataList={cellDataList}\n      className={isOver ? \" hovered\" : \"\"}\n      ref={drop}\n      direction={direction}\n      customCells={customCells}\n    />\n  );\n};\n","import React, { forwardRef, useContext } from \"react\";\nimport { Button, Row, Col } from \"antd\";\nimport styled from \"styled-components\";\nimport update from \"immutability-helper\";\nimport { CellData } from \"../../../../schemas/CellData\";\nimport { InstanceContext } from \"../../../../../Instance\";\nimport { DndLane } from \"./components/DndLane\";\nimport { Lane } from \"./components/Lane\";\nimport \"./index.css\";\nimport { LaneData } from \"../../../../schemas/LaneData\";\nimport { CustomCell } from \"../../../Cell\";\n\ninterface PoolProps {\n  direction?: \"horizontal\" | \"vertical\";\n  cellData: CellData;\n  customCells?: CustomCell[];\n}\n\nconst InstanceListHeaderItem = styled(Col)`\n  padding: 0 10px;\n  white-space: nowrap;\n  width: 100%;\n  overflow-x: auto;\n\n  > div {\n    width: 200px;\n    display: inline-block;\n  }\n`;\n\nexport const Pool = forwardRef(\n  (\n    { direction = \"horizontal\", cellData, customCells }: PoolProps,\n    ref: any\n  ) => {\n    const instanceDispatch = useContext(InstanceContext);\n    const isDesigner = instanceDispatch === null;\n    function getLane(lane: LaneData, index: number) {\n      return isDesigner ? (\n        <DndLane\n          key={cellData.id + \"-\" + index}\n          direction={direction}\n          cellDataList={lane.cellDataList}\n          location={{\n            parentId: cellData.id,\n            index: index,\n          }}\n          span={lane.span}\n          customCells={customCells}\n        />\n      ) : (\n        <Lane\n          key={cellData.id + \"-\" + index}\n          cellDataList={lane.cellDataList}\n          direction={direction}\n          span={lane.span}\n          customCells={customCells}\n        />\n      );\n    }\n\n    return (\n      <>\n        <Row ref={ref} className={\"lanes\"}>\n          {direction === \"horizontal\" ? (\n            <>{cellData.lanes!.map((lane, index) => getLane(lane, index))}</>\n          ) : (\n            <>\n              {!isDesigner && (\n                <InstanceListHeaderItem span={12}>\n                  {cellData.lanes![0].cellDataList.map((item) => (\n                    <div>\n                      <span>{item.label}</span>\n                    </div>\n                  ))}\n                </InstanceListHeaderItem>\n              )}\n              {cellData.lanes!.map((lane) => {\n                return getLane(lane, 0);\n              })}\n            </>\n          )}\n        </Row>\n        {!isDesigner && direction === \"vertical\" && (\n          <Button\n            onClick={() => {\n              instanceDispatch({\n                type: \"UPDATE\",\n                data: update(cellData, {\n                  lanes: {\n                    $push: [\n                      update(cellData.lanes![0], {\n                        cellDataList: {\n                          $apply: function (x: CellData[]) {\n                            return x.map((y) => ({\n                              ...y,\n                              id: y.id + +new Date(),\n                            }));\n                          },\n                        },\n                      }),\n                    ],\n                  },\n                }),\n              });\n            }}\n            type={\"link\"}\n          >\n            Add\n          </Button>\n        )}\n      </>\n    );\n  }\n);\n","import React, { forwardRef } from \"react\";\nimport { Pool } from \"./components/Pool\";\nimport { CellData } from \"../../schemas/CellData\";\nimport { CustomCell } from \"../Cell\";\n\ninterface GridCellProps {\n  data: CellData;\n  direction?: \"horizontal\" | \"vertical\";\n  customCells?: CustomCell[];\n}\n\nexport const GridCell = forwardRef(\n  ({ data, direction, customCells }: GridCellProps, ref: any) => {\n    return (\n      <>\n        <Pool\n          ref={ref}\n          cellData={data}\n          direction={direction}\n          customCells={customCells}\n        />\n      </>\n    );\n  }\n);\n","import React, { forwardRef } from \"react\";\nimport { CellData } from \"../schemas/CellData\";\nimport { Select } from \"antd\";\nimport { FormGroup } from \"./FormGroup\";\n\nconst { Option } = Select;\n\ninterface SelectCellProps {\n  data: CellData;\n  layout?: \"vertical\" | \"horizontal\";\n  dispatch: any;\n}\n\nexport const SelectCell = forwardRef(\n  ({ data, layout, dispatch }: SelectCellProps, ref: any) => {\n    if (!data.options || data.options.length === 0) {\n      data.options = [\n        {\n          label: \"Joyce\",\n          value: \"1\",\n        },\n        {\n          label: \"Teresa\",\n          value: \"2\",\n        },\n      ];\n    }\n    return (\n      <>\n        <FormGroup\n          ref={ref}\n          required={data.required!}\n          warning={data.warning}\n          layout={layout}\n          warnable={data.warnable!}\n          label={\n            data.labeled ? (\n              <label title={data.label}>{data.label}</label>\n            ) : (\n              <></>\n            )\n          }\n          element={\n            <Select\n              placeholder={data.placeholder}\n              disabled={data.disabled}\n              style={{ width: \"100%\" }}\n              onChange={(value) => {\n                dispatch &&\n                  dispatch({\n                    type: \"SET_VALUE\",\n                    target: data,\n                    value: value,\n                  });\n              }}\n            >\n              {data.options?.map((option) => (\n                <Option key={option.value} value={option.value}>\n                  {option.label}\n                </Option>\n              ))}\n            </Select>\n          }\n        />\n      </>\n    );\n  }\n);\n","import React, { forwardRef } from \"react\";\nimport { DatePicker } from \"antd\";\nimport { FormGroup } from \"./FormGroup\";\nimport { CellData } from \"../schemas/CellData\";\n\ninterface DateCellProps {\n  data: CellData;\n  layout?: \"vertical\" | \"horizontal\";\n  dispatch: any;\n}\n\nexport const DateCell = forwardRef(\n  ({ data, layout, dispatch }: DateCellProps, ref: any) => (\n    <>\n      <FormGroup\n        ref={ref}\n        required={data.required!}\n        warning={data.warning}\n        layout={layout}\n        warnable={data.warnable!}\n        label={\n          data.labeled ? <label title={data.label}>{data.label}</label> : <></>\n        }\n        element={\n          <DatePicker\n            style={{ width: \"100%\" }}\n            disabled={data.disabled}\n            value={data.value}\n            placeholder={data.placeholder}\n            onChange={(date) => {\n              dispatch &&\n                dispatch({\n                  type: \"SET_VALUE\",\n                  target: data,\n                  value: date,\n                });\n            }}\n          />\n        }\n      />\n    </>\n  )\n);\n","import React from \"react\";\nimport { CellData } from \"../schemas/CellData\";\nimport { FormGroup } from \"./FormGroup\";\nimport { Checkbox } from \"antd\";\n\ninterface CheckboxCellProps {\n  data: CellData;\n  layout?: \"vertical\" | \"horizontal\";\n  dispatch: any;\n}\n\nexport default function ({ data, layout, dispatch }: CheckboxCellProps) {\n  return (\n    <>\n      <FormGroup\n        required={data.required}\n        warnable={data.warnable}\n        label={<label>{data.label}</label>}\n        element={\n          <>\n            <Checkbox.Group\n              options={data.options}\n              onChange={(checkedValues) => {\n                console.log(checkedValues);\n              }}\n            />\n          </>\n        }\n      />\n    </>\n  );\n}\n","import React, { forwardRef } from \"react\";\nimport { CellData } from \"../schemas/CellData\";\n\ninterface LabelCellProps {\n  data: CellData;\n  layout?: \"vertical\" | \"horizontal\";\n  dispatch: any;\n}\n\nexport const LabelCell = forwardRef(({ data }: LabelCellProps, ref: any) => (\n  <div style={{ height: 42, padding: \"0 10px\" }}>\n    <label style={{ lineHeight: \"42px\" }} title={data.label}>\n      {data.label || \" \"}\n    </label>\n  </div>\n));\n","import React, {\n  CSSProperties,\n  forwardRef,\n  FunctionComponent,\n  useContext,\n} from \"react\";\nimport { CellData } from \"../schemas/CellData\";\nimport { InputCell } from \"./InputCell\";\nimport { GridCell } from \"./GridCell\";\nimport { SelectCell } from \"./SelectCell\";\nimport { DateCell } from \"./DateCell\";\nimport { InstanceContext } from \"../../Instance\";\nimport CheckboxCell from \"./CheckboxCell\";\nimport { LabelCell } from \"./LabelCell\";\n\nexport interface CustomCellProps {\n  data: CellData;\n  layout?: \"vertical\" | \"horizontal\";\n  dispatch: any;\n}\nexport interface CustomCell {\n  type: string;\n  cell: FunctionComponent<CustomCellProps>;\n  config: FunctionComponent<{\n    data: CellData;\n    onChange: (data: CellData) => void;\n  }>;\n  icon: JSX.Element;\n  name: string;\n}\ninterface CellProps {\n  cellData: CellData;\n  layout?: \"vertical\" | \"horizontal\";\n  style?: CSSProperties;\n  onClick?: (event: any) => void;\n  className?: string;\n  customCells?: CustomCell[];\n}\nexport const Cell = forwardRef(\n  (\n    {\n      cellData,\n      layout = \"horizontal\",\n      style,\n      onClick,\n      className,\n      customCells,\n    }: CellProps,\n    ref: any\n  ) => {\n    const instanceDispatch = useContext(InstanceContext);\n    const data = {\n      required: false,\n      warnable: false,\n      layout: \"default\",\n      labeled: true,\n      ...cellData,\n    };\n    return (\n      <>\n        <div\n          ref={ref}\n          style={style}\n          className={`instance ${\n            !instanceDispatch && data.active ? \" active \" : \" \"\n          }${className || \"\"}`}\n          onClick={onClick}\n        >\n          {data.type === \"input\" ? (\n            <>\n              <InputCell\n                data={data}\n                dispatch={instanceDispatch}\n                layout={layout}\n              />\n            </>\n          ) : data.type === \"grid\" ? (\n            <>\n              <GridCell data={data} customCells={customCells} />\n            </>\n          ) : data.type === \"list\" ? (\n            <>\n              <GridCell data={data} direction={\"vertical\"} />\n            </>\n          ) : data.type === \"select\" ? (\n            <>\n              <SelectCell\n                data={data}\n                dispatch={instanceDispatch}\n                layout={layout}\n              />\n            </>\n          ) : data.type === \"datetime\" ? (\n            <DateCell data={data} dispatch={instanceDispatch} layout={layout} />\n          ) : data.type === \"checkbox\" ? (\n            <CheckboxCell\n              data={data}\n              dispatch={instanceDispatch}\n              layout={layout}\n            />\n          ) : data.type === \"label\" ? (\n            <LabelCell\n              data={data}\n              dispatch={instanceDispatch}\n              layout={layout}\n            />\n          ) : (\n            (customCells &&\n              customCells.some((item) => item.type === data.type) &&\n              React.createElement(\n                customCells.filter((item) => item.type === data.type)[0].cell,\n                {\n                  data,\n                  dispatch: instanceDispatch,\n                  layout,\n                }\n              )) || (\n              <>\n                <span>{\"No Data\"}</span>\n                <span>{JSON.stringify(customCells?.length)}</span>\n              </>\n            )\n          )}\n        </div>\n      </>\n    );\n  }\n);\n","import React, { useContext, useRef, useState } from \"react\";\nimport { useDrag, useDrop, XYCoord } from \"react-dnd\";\nimport { CellData } from \"../schemas/CellData\";\nimport { DesignerContext } from \"../index\";\nimport { createWidgetInstance } from \"../util\";\nimport { Cell, CustomCell } from \"./Cell\";\n\ninterface DnDCellProps {\n  cellData: CellData;\n  layout?: \"vertical\" | \"horizontal\";\n  index: number;\n  className?: string;\n  customCells?: CustomCell[];\n}\n\ninterface DragItem {\n  index: number;\n  id: string;\n  type: string;\n}\n\nexport const DnDCell = function ({\n  cellData,\n  index,\n  layout = \"horizontal\",\n  className,\n  customCells,\n}: DnDCellProps) {\n  const data = {\n    required: false,\n    warnable: false,\n    layout: \"default\",\n    labeled: true,\n    ...cellData,\n  };\n  const ref = useRef<any>(null);\n  const designerDispatch = useContext(DesignerContext);\n  const [dropClassName, setDropClassName] = useState<\n    | \"\"\n    | \" drop-over-leftward\"\n    | \" drop-over-rightward\"\n    | \" drop-over-upward\"\n    | \" drop-over-downward\"\n  >(\"\");\n  const [{ isOver }, drop] = useDrop({\n    accept: [\n      \"instance\",\n      \"input\",\n      \"select\",\n      \"checkbox\",\n      \"datetime\",\n      \"grid\",\n      \"list\",\n      \"label\",\n      ...(customCells || []).map((item) => item.type),\n    ],\n    hover: (item: DragItem, monitor) => {\n      if (\n        !ref.current ||\n        !monitor.isOver({ shallow: true }) ||\n        monitor.getItem().id === cellData.id ||\n        !monitor.getClientOffset()\n      ) {\n        setDropClassName(\"\");\n        return;\n      }\n      const hoverBoundingRect = ref.current!.getBoundingClientRect();\n      const clientOffset = monitor.getClientOffset();\n      const coord = clientOffset as XYCoord;\n      if (layout === \"horizontal\") {\n        const hoverMiddleY =\n          (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n        const hoverClientY = coord.y - hoverBoundingRect.top;\n        setDropClassName(\n          hoverClientY > hoverMiddleY\n            ? \" drop-over-downward\"\n            : \" drop-over-upward\"\n        );\n      } else {\n        const hoverMiddleX =\n          (hoverBoundingRect.right - hoverBoundingRect.left) / 2;\n        const hoverClientX = coord.x - hoverBoundingRect.left;\n        setDropClassName(\n          hoverClientX > hoverMiddleX\n            ? \" drop-over-rightward\"\n            : \" drop-over-leftward\"\n        );\n      }\n    },\n    collect: (monitor) => {\n      return {\n        isOver: monitor.isOver({ shallow: true }),\n      };\n    },\n    drop(item: DragItem, monitor) {\n      if (!ref.current) {\n        return;\n      }\n      if (!monitor.isOver({ shallow: true })) {\n        return;\n      }\n\n      let position: \"up\" | \"down\";\n      const hoverBoundingRect = ref.current!.getBoundingClientRect();\n      const clientOffset = monitor.getClientOffset();\n      if (!clientOffset) {\n        return;\n      }\n      if (layout === \"horizontal\") {\n        const hoverMiddleY =\n          (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n        const hoverClientY =\n          (clientOffset as XYCoord).y - hoverBoundingRect.top;\n        position = hoverClientY > hoverMiddleY ? \"down\" : \"up\";\n      } else {\n        const hoverMiddleX =\n          (hoverBoundingRect.right - hoverBoundingRect.left) / 2;\n        const hoverClientX =\n          (clientOffset as XYCoord).x - hoverBoundingRect.left;\n        position = hoverClientX > hoverMiddleX ? \"down\" : \"up\";\n      }\n\n      if (item.type === \"instance\") {\n        designerDispatch({\n          type: \"POSITIONED_MOVE\",\n          id: monitor.getItem().id,\n          position: position,\n          dropItemId: cellData.id,\n        });\n      } else {\n        designerDispatch({\n          type: \"POSITIONED_ADD\",\n          position: position,\n          dropItemId: cellData.id,\n          dragItem: createWidgetInstance(item.type as string),\n        });\n      }\n    },\n  });\n  const [{ isDragging }, drag] = useDrag({\n    item: { type: \"instance\", id: cellData.id, index },\n    collect: (monitor: any) => ({\n      isDragging: !!monitor.isDragging(),\n    }),\n    begin: () => {\n      designerDispatch({\n        type: \"ACTIVE\",\n        id: cellData.id,\n      });\n    },\n  });\n  drag(drop(ref));\n\n  return (\n    <>\n      <Cell\n        customCells={customCells}\n        className={`${isOver ? dropClassName : \"\"} ${className || \"\"}`}\n        onClick={(event) => {\n          event.stopPropagation();\n          designerDispatch({\n            type: \"ACTIVE\",\n            id: cellData.id,\n          });\n          designerDispatch({\n            type: \"EDIT\",\n            id: cellData.id,\n          });\n        }}\n        ref={ref}\n        style={{ opacity: isDragging ? \"0.5\" : 1 }}\n        cellData={data}\n        layout={layout}\n      />\n    </>\n  );\n};\n","import React, { useRef } from \"react\";\nimport { useDrag, useDrop, XYCoord } from \"react-dnd\";\nimport { AiOutlineMenu, AiOutlineMinusCircle } from \"react-icons/ai\";\nimport { Button, InputNumber } from \"antd\";\nimport { LaneData } from \"../../../schemas/LaneData\";\n\ninterface DragItem {\n  index: number;\n  type: string;\n}\n\ninterface LaneConfigProps {\n  index: number;\n  data: LaneData;\n  move: (from: number, to: number) => void;\n  onRemove: () => void;\n  onResize: (span: number | undefined) => void;\n}\n\nexport default function LaneConfig({\n  index,\n  data,\n  move,\n  onRemove,\n  onResize,\n}: LaneConfigProps) {\n  const ref = useRef<HTMLDivElement>(null);\n  const [, drag] = useDrag({\n    item: {\n      type: \"config\",\n      index: index,\n    },\n    collect: (monitor) => ({\n      isDragging: monitor.isDragging(),\n    }),\n  });\n\n  const [, drop] = useDrop({\n    accept: \"config\",\n    hover: (item: DragItem, monitor) => {\n      if (!ref.current) {\n        return;\n      }\n      const dragIndex = item.index;\n      const hoverIndex = index;\n\n      // Don't replace items with themselves\n      if (dragIndex === hoverIndex) {\n        return;\n      }\n\n      // Determine rectangle on screen\n      const hoverBoundingRect = ref.current!.getBoundingClientRect();\n\n      // Get vertical middle\n      const hoverMiddleY =\n        (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n\n      // Determine mouse position\n      const clientOffset = monitor.getClientOffset();\n\n      // Get pixels to the top\n      const hoverClientY = (clientOffset as XYCoord).y - hoverBoundingRect.top;\n\n      // Only perform the move when the mouse has crossed half of the items height\n      // When dragging downwards, only move when the cursor is below 50%\n      // When dragging upwards, only move when the cursor is above 50%\n\n      // Dragging downwards\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return;\n      }\n\n      // Dragging upwards\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        return;\n      }\n\n      // Time to actually perform the action\n      move(dragIndex, hoverIndex);\n\n      // Note: we're mutating the monitor item here!\n      // Generally it's better to avoid mutations,\n      // but it's good here for the sake of performance\n      // to avoid expensive index searches.\n      item.index = hoverIndex;\n    },\n  });\n  drag(drop(ref));\n  return (\n    <>\n      <div ref={ref}>\n        <AiOutlineMenu style={{ cursor: \"move\" }} />\n        <InputNumber\n          onChange={onResize}\n          value={data.span}\n          size={\"small\"}\n          style={{\n            width: \"160px\",\n            margin: \"0 4px\",\n          }}\n        />\n        <Button type={\"link\"} onClick={onRemove} style={{ padding: \"0\" }}>\n          <AiOutlineMinusCircle />\n        </Button>\n      </div>\n    </>\n  );\n}\n","import React, { useContext } from \"react\";\nimport LaneConfig from \"./components/LaneConfig\";\nimport update from \"immutability-helper\";\nimport { Button, Form } from \"antd\";\nimport { CellData } from \"../../schemas/CellData\";\nimport { DesignerContext } from \"../../index\";\n\ninterface GridCellConfigProps {\n  data: CellData;\n}\n\nexport default function GridCellConfig({ data }: GridCellConfigProps) {\n  const designerDispatch = useContext(DesignerContext);\n  return (\n    <Form labelCol={{ span: 6 }}>\n      <Form.Item label={\"列\"}>\n        <>\n          {data &&\n            data.lanes &&\n            data.lanes.map((lane, index) => (\n              <LaneConfig\n                key={\"lane-config-\" + index}\n                index={index}\n                data={lane}\n                onResize={(span) => {\n                  designerDispatch({\n                    type: \"UPDATE\",\n                    data: {\n                      ...data,\n                      lanes: update(data.lanes, {\n                        [index]: {\n                          span: { $set: span || 0 },\n                        },\n                      }),\n                    },\n                  });\n                }}\n                onRemove={() => {\n                  designerDispatch({\n                    type: \"UPDATE\",\n                    data: {\n                      ...data,\n                      lanes: update(data.lanes, {\n                        $splice: [[index, 1]],\n                      }),\n                    },\n                  });\n                }}\n                move={(from, to) => {\n                  const dragItem = data.lanes?.[from]!;\n                  designerDispatch({\n                    type: \"UPDATE\",\n                    data: {\n                      ...data,\n                      lanes: update(data.lanes, {\n                        $splice: [\n                          [from, 1],\n                          [to, 0, dragItem],\n                        ],\n                      }),\n                    },\n                  });\n                }}\n              />\n            ))}\n          <Button\n            type={\"link\"}\n            onClick={() => {\n              const copy = { ...data };\n              copy.lanes!.push({ cellDataList: [], span: 12 });\n              designerDispatch({\n                type: \"UPDATE\",\n                data: copy,\n              });\n            }}\n          >\n            添加列\n          </Button>\n        </>\n      </Form.Item>\n    </Form>\n  );\n}\n","import React, { useContext } from \"react\";\nimport { CellData } from \"../schemas/CellData\";\nimport { DesignerContext } from \"../index\";\nimport { Input, Switch, Form } from \"antd\";\nimport update from \"immutability-helper\";\n\ninterface InputCellConfigProps {\n  data: CellData;\n}\n\nexport default function InputCellConfig({ data }: InputCellConfigProps) {\n  const designerDispatch = useContext(DesignerContext);\n  return (\n    <>\n      <Form labelCol={{ span: 6 }}>\n        <Form.Item label={\"标题\"}>\n          <Input\n            value={data.label}\n            onChange={(event) => {\n              designerDispatch({\n                type: \"UPDATE\",\n                data: update(data, {\n                  label: { $set: event.target.value },\n                }),\n              });\n            }}\n          />\n        </Form.Item>\n        <Form.Item label={\"必填\"}>\n          <Switch\n            checked={data.required}\n            onChange={(checked) => {\n              designerDispatch({\n                type: \"UPDATE\",\n                data: update(data, {\n                  required: { $set: checked },\n                }),\n              });\n            }}\n          />\n        </Form.Item>\n        <Form.Item label={\"只读\"}>\n          <Switch\n            checked={data.disabled}\n            onChange={(checked) => {\n              designerDispatch({\n                type: \"UPDATE\",\n                data: update(data, {\n                  disabled: { $set: checked },\n                }),\n              });\n            }}\n          />\n        </Form.Item>\n        <Form.Item label={\"默认值\"}>\n          <Input\n            value={data.defaultValue}\n            onChange={(event) => {\n              designerDispatch({\n                type: \"UPDATE\",\n                data: update(data, {\n                  defaultValue: { $set: event.target.value },\n                }),\n              });\n            }}\n          />\n        </Form.Item>\n      </Form>\n    </>\n  );\n}\n","import React, { useContext, useState } from \"react\";\nimport { CellData } from \"../schemas/CellData\";\nimport { DesignerContext } from \"../index\";\nimport { Input, Switch, Form, AutoComplete, Typography } from \"antd\";\nimport update from \"immutability-helper\";\n\nconst { Text } = Typography;\n\ninterface DateCellConfigProps {\n  data: CellData;\n}\n\nexport default function DateCellConfig({ data }: DateCellConfigProps) {\n  const defaultValueOptions = [\n    {\n      label: (\n        <>\n          <Text>now: </Text>\n          <Text type={\"secondary\"}>当前时间</Text>\n        </>\n      ),\n      text: \"now\",\n      value: \"now\",\n    },\n  ];\n  const [currentDefaultValueOptions, setCurrentDefaultValueOptions] = useState(\n    defaultValueOptions\n  );\n  const designerDispatch = useContext(DesignerContext);\n  return (\n    <>\n      <Form labelCol={{ span: 6 }}>\n        <Form.Item label={\"标题\"}>\n          <Input\n            value={data.label}\n            onChange={(event) => {\n              designerDispatch({\n                type: \"UPDATE\",\n                data: update(data, {\n                  label: { $set: event.target.value },\n                }),\n              });\n            }}\n          />\n        </Form.Item>\n        <Form.Item label={\"必填\"}>\n          <Switch\n            checked={data.required}\n            onChange={(checked) => {\n              designerDispatch({\n                type: \"UPDATE\",\n                data: update(data, {\n                  required: { $set: checked },\n                }),\n              });\n            }}\n          />\n        </Form.Item>\n        <Form.Item label={\"只读\"}>\n          <Switch\n            checked={data.disabled}\n            onChange={(checked) => {\n              designerDispatch({\n                type: \"UPDATE\",\n                data: update(data, {\n                  disabled: { $set: checked },\n                }),\n              });\n            }}\n          />\n        </Form.Item>\n        <Form.Item label={\"默认值\"}>\n          <AutoComplete\n            onSearch={(searchText) => {\n              setCurrentDefaultValueOptions(\n                defaultValueOptions.filter(\n                  (item) => item.text.search(new RegExp(searchText, \"i\")) > -1\n                )\n              );\n            }}\n          >\n            {currentDefaultValueOptions.map((option) => (\n              <AutoComplete.Option value={option.value} key={option.value}>\n                {option.label}\n              </AutoComplete.Option>\n            ))}\n          </AutoComplete>\n        </Form.Item>\n      </Form>\n    </>\n  );\n}\n","import React, { useRef } from \"react\";\nimport { useDrag, useDrop, XYCoord } from \"react-dnd\";\nimport { AiOutlineMenu, AiOutlineMinusCircle } from \"react-icons/ai\";\nimport { Button, Input } from \"antd\";\n\ninterface DragItem {\n  index: number;\n  type: string;\n}\n\ninterface OptionConfigProps {\n  index: number;\n  data: string;\n  move: (from: number, to: number) => void;\n  onRemove: () => void;\n  onChange: (data: string) => void;\n}\n\nexport default function OptionConfig({\n  index,\n  data,\n  move,\n  onRemove,\n  onChange,\n}: OptionConfigProps) {\n  const ref = useRef<HTMLDivElement>(null);\n  const [, drag] = useDrag({\n    item: {\n      type: \"config\",\n      index: index,\n    },\n    collect: (monitor) => ({\n      isDragging: monitor.isDragging(),\n    }),\n  });\n\n  const [, drop] = useDrop({\n    accept: \"config\",\n    hover: (item: DragItem, monitor) => {\n      if (!ref.current) {\n        return;\n      }\n      const dragIndex = item.index;\n      const hoverIndex = index;\n\n      // Don't replace items with themselves\n      if (dragIndex === hoverIndex) {\n        return;\n      }\n\n      // Determine rectangle on screen\n      const hoverBoundingRect = ref.current!.getBoundingClientRect();\n\n      // Get vertical middle\n      const hoverMiddleY =\n        (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n\n      // Determine mouse position\n      const clientOffset = monitor.getClientOffset();\n\n      // Get pixels to the top\n      const hoverClientY = (clientOffset as XYCoord).y - hoverBoundingRect.top;\n\n      // Only perform the move when the mouse has crossed half of the items height\n      // When dragging downwards, only move when the cursor is below 50%\n      // When dragging upwards, only move when the cursor is above 50%\n\n      // Dragging downwards\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return;\n      }\n\n      // Dragging upwards\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        return;\n      }\n\n      // Time to actually perform the action\n      move(dragIndex, hoverIndex);\n\n      // Note: we're mutating the monitor item here!\n      // Generally it's better to avoid mutations,\n      // but it's good here for the sake of performance\n      // to avoid expensive index searches.\n      item.index = hoverIndex;\n    },\n  });\n  drag(drop(ref));\n  return (\n    <>\n      <div ref={ref}>\n        <AiOutlineMenu style={{ cursor: \"move\" }} />\n        <Input\n          onChange={(event) => {\n            onChange(event.target.value);\n          }}\n          value={data}\n          size={\"small\"}\n          style={{\n            width: \"120px\",\n            margin: \"0 4px\",\n          }}\n        />\n        <Button type={\"link\"} onClick={onRemove} style={{ padding: \"0\" }}>\n          <AiOutlineMinusCircle />\n        </Button>\n      </div>\n    </>\n  );\n}\n","import React, { useContext } from \"react\";\nimport { CellData } from \"../../schemas/CellData\";\nimport { DesignerContext } from \"../../index\";\nimport { Input, Switch, Form, Button } from \"antd\";\nimport update from \"immutability-helper\";\nimport OptionConfig from \"./components/OptionConfig\";\n\ninterface SelectCellConfigProps {\n  data: CellData;\n}\n\nexport default function SelectCellConfig({ data }: SelectCellConfigProps) {\n  const designerDispatch = useContext(DesignerContext);\n  return (\n    <>\n      <Form labelCol={{ span: 6 }}>\n        <Form.Item label={\"标题\"}>\n          <Input\n            value={data.label}\n            onChange={(event) => {\n              designerDispatch({\n                type: \"UPDATE\",\n                data: update(data, {\n                  label: { $set: event.target.value },\n                }),\n              });\n            }}\n          />\n        </Form.Item>\n        <Form.Item label={\"必填\"}>\n          <Switch\n            checked={data.required}\n            onChange={(checked) => {\n              designerDispatch({\n                type: \"UPDATE\",\n                data: update(data, {\n                  required: { $set: checked },\n                }),\n              });\n            }}\n          />\n        </Form.Item>\n        <Form.Item label={\"只读\"}>\n          <Switch\n            checked={data.disabled}\n            onChange={(checked) => {\n              designerDispatch({\n                type: \"UPDATE\",\n                data: update(data, {\n                  disabled: { $set: checked },\n                }),\n              });\n            }}\n          />\n        </Form.Item>\n        <Form.Item label={\"选项\"}>\n          <>\n            {data &&\n              data.options &&\n              data.options.map((option, index) => (\n                <OptionConfig\n                  key={\"option-config-\" + index}\n                  index={index}\n                  data={option.label}\n                  onChange={(label) => {\n                    designerDispatch({\n                      type: \"UPDATE\",\n                      data: {\n                        ...data,\n                        options: update(data.options, {\n                          [index]: {\n                            label: { $set: label || \"\" },\n                          },\n                        }),\n                      },\n                    });\n                  }}\n                  onRemove={() => {\n                    designerDispatch({\n                      type: \"UPDATE\",\n                      data: {\n                        ...data,\n                        options: update(data.options, {\n                          $splice: [[index, 1]],\n                        }),\n                      },\n                    });\n                  }}\n                  move={(from, to) => {\n                    const dragItem = data.options?.[from]!;\n                    designerDispatch({\n                      type: \"UPDATE\",\n                      data: {\n                        ...data,\n                        options: update(data.options, {\n                          $splice: [\n                            [from, 1],\n                            [to, 0, dragItem],\n                          ],\n                        }),\n                      },\n                    });\n                  }}\n                />\n              ))}\n            <Button\n              type={\"link\"}\n              onClick={() => {\n                const copy = { ...data };\n                copy.options!.push({ label: \"新选项\", value: +new Date() });\n                designerDispatch({\n                  type: \"UPDATE\",\n                  data: copy,\n                });\n              }}\n            >\n              添加列\n            </Button>\n          </>\n        </Form.Item>\n      </Form>\n    </>\n  );\n}\n","import React from \"react\";\nimport { WidgetData } from \"../schemas/WidgetData\";\nimport { useDrag } from \"react-dnd\";\nimport styled from \"styled-components\";\n\ninterface WidgetProps {\n  widget: WidgetData;\n}\n\nconst StyledLi = styled.li`\n  font-size: 14px;\n  box-sizing: border-box;\n  width: 125px;\n  display: inline-block;\n  cursor: move;\n  border: 1px solid #a3a3a3;\n  padding: 5px 10px;\n  margin: 2px;\n  -moz-user-select: none;\n  -webkit-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  background-color: white;\n\n  > * {\n    margin-right: 4px;\n    vertical-align: middle;\n  }\n`;\n\nexport function Widget({ widget }: WidgetProps) {\n  const [{ isDragging }, drag] = useDrag({\n    item: { type: widget.type },\n    collect: (monitor) => ({\n      isDragging: !!monitor.isDragging(),\n    }),\n  });\n\n  return (\n    <StyledLi\n      key={widget.name}\n      style={{ opacity: isDragging ? \"0.5\" : 1 }}\n      ref={drag}\n    >\n      {widget.icon}\n      <span>{widget.name}</span>\n    </StyledLi>\n  );\n}\n","import React, { Fragment } from \"react\";\nimport { WidgetData } from \"../schemas/WidgetData\";\nimport { Widget } from \"./Widget\";\n\ninterface WidgetGroupProps {\n  name: string;\n  list: WidgetData[];\n}\n\nexport default function ({ name, list }: WidgetGroupProps) {\n  return (\n    <>\n      <Fragment key={name}>\n        <div>{name}</div>\n        <ul\n          style={{\n            width: \"100%\",\n            listStyle: \"none\",\n            padding: 0,\n          }}\n        >\n          {list.map((w: WidgetData) => {\n            return <Widget key={w.name} widget={w} />;\n          })}\n        </ul>\n      </Fragment>\n    </>\n  );\n}\n","import React, { useContext } from \"react\";\nimport { CellData } from \"../../schemas/CellData\";\nimport { DesignerContext } from \"../../index\";\nimport { Input, Switch, Form, Button } from \"antd\";\nimport update from \"immutability-helper\";\nimport OptionConfig from \"../SelectCellConfig/components/OptionConfig\";\n\ninterface CheckboxCellConfigProps {\n  data: CellData;\n}\n\nexport default function CheckboxCellConfig({ data }: CheckboxCellConfigProps) {\n  const designerDispatch = useContext(DesignerContext);\n  return (\n    <>\n      <Form labelCol={{ span: 6 }}>\n        <Form.Item label={\"标题\"}>\n          <Input\n            value={data.label}\n            onChange={(event) => {\n              designerDispatch({\n                type: \"UPDATE\",\n                data: update(data, {\n                  label: { $set: event.target.value },\n                }),\n              });\n            }}\n          />\n        </Form.Item>\n        <Form.Item label={\"必填\"}>\n          <Switch\n            checked={data.required}\n            onChange={(checked) => {\n              designerDispatch({\n                type: \"UPDATE\",\n                data: update(data, {\n                  required: { $set: checked },\n                }),\n              });\n            }}\n          />\n        </Form.Item>\n        <Form.Item label={\"只读\"}>\n          <Switch\n            checked={data.disabled}\n            onChange={(checked) => {\n              designerDispatch({\n                type: \"UPDATE\",\n                data: update(data, {\n                  disabled: { $set: checked },\n                }),\n              });\n            }}\n          />\n        </Form.Item>\n        <Form.Item label={\"选项\"}>\n          <>\n            {data &&\n              data.options &&\n              data.options.map((option, index) => (\n                <OptionConfig\n                  key={\"option-config-\" + index}\n                  index={index}\n                  data={option.label}\n                  onChange={(label) => {\n                    designerDispatch({\n                      type: \"UPDATE\",\n                      data: {\n                        ...data,\n                        options: update(data.options, {\n                          [index]: {\n                            label: { $set: label || \"\" },\n                          },\n                        }),\n                      },\n                    });\n                  }}\n                  onRemove={() => {\n                    designerDispatch({\n                      type: \"UPDATE\",\n                      data: {\n                        ...data,\n                        options: update(data.options, {\n                          $splice: [[index, 1]],\n                        }),\n                      },\n                    });\n                  }}\n                  move={(from, to) => {\n                    const dragItem = data.options?.[from]!;\n                    designerDispatch({\n                      type: \"UPDATE\",\n                      data: {\n                        ...data,\n                        options: update(data.options, {\n                          $splice: [\n                            [from, 1],\n                            [to, 0, dragItem],\n                          ],\n                        }),\n                      },\n                    });\n                  }}\n                />\n              ))}\n            <Button\n              type={\"link\"}\n              onClick={() => {\n                const copy = { ...data };\n                copy.options!.push({ label: \"新选项\", value: +new Date() });\n                designerDispatch({\n                  type: \"UPDATE\",\n                  data: copy,\n                });\n              }}\n            >\n              添加列\n            </Button>\n          </>\n        </Form.Item>\n      </Form>\n    </>\n  );\n}\n","import React, { useContext } from \"react\";\nimport { CellData } from \"../schemas/CellData\";\nimport { DesignerContext } from \"../index\";\nimport { Input, Form } from \"antd\";\nimport update from \"immutability-helper\";\n\ninterface LabelCellConfigProps {\n  data: CellData;\n}\n\nexport default function LabelCellConfig({ data }: LabelCellConfigProps) {\n  const designerDispatch = useContext(DesignerContext);\n  return (\n    <>\n      <Form labelCol={{ span: 6 }}>\n        <Form.Item label={\"标题\"}>\n          <Input\n            value={data.label}\n            onChange={(event) => {\n              designerDispatch({\n                type: \"UPDATE\",\n                data: update(data, {\n                  label: { $set: event.target.value },\n                }),\n              });\n            }}\n          />\n        </Form.Item>\n      </Form>\n    </>\n  );\n}\n","import React, { forwardRef } from \"react\";\nimport { Input } from \"antd\";\nimport { CellData } from \"./Designer/schemas/CellData\";\nimport { FormGroup } from \"./Designer/components/FormGroup\";\ninterface TextAreaCellProps {\n  data: CellData;\n  layout?: \"vertical\" | \"horizontal\";\n  dispatch: any;\n}\n\nconst { TextArea } = Input;\n\nexport const TextAreaCell = forwardRef(\n  ({ data, layout, dispatch }: TextAreaCellProps, ref: any) => {\n    const innerData = { ...data };\n    innerData.label = innerData.label || \"多行文本\";\n    return (\n      <>\n        <FormGroup\n          ref={ref}\n          required={innerData.required!}\n          warning={innerData.warning}\n          layout={layout}\n          warnable={innerData.warnable!}\n          label={\n            innerData.labeled ? (\n              <label title={innerData.label}>{innerData.label}</label>\n            ) : (\n              <></>\n            )\n          }\n          element={\n            <TextArea\n              rows={4}\n              value={innerData.value}\n              placeholder={innerData.placeholder}\n              disabled={innerData.disabled}\n              onChange={(event) => {\n                dispatch &&\n                  dispatch({\n                    type: \"SET_VALUE\",\n                    target: innerData,\n                    value: event.target.value,\n                  });\n              }}\n            />\n          }\n        />\n      </>\n    );\n  }\n);\n","import React, { useContext } from \"react\";\nimport { CellData } from \"./Designer/schemas/CellData\";\nimport { DesignerContext } from \"./Designer\";\nimport { Input, Switch, Form } from \"antd\";\nimport update from \"immutability-helper\";\n\ninterface TextAreaCellConfigProps {\n  data: CellData;\n}\n\nexport default function TextAreaCellConfig({ data }: TextAreaCellConfigProps) {\n  const designerDispatch = useContext(DesignerContext);\n  const innerData = { ...data };\n  innerData.label = innerData.label || \"多行文本\";\n  return (\n    <>\n      <Form labelCol={{ span: 6 }}>\n        <Form.Item label={\"标题\"}>\n          <Input\n            value={innerData.label}\n            onChange={(event) => {\n              designerDispatch({\n                type: \"UPDATE\",\n                data: update(innerData, {\n                  label: { $set: event.target.value },\n                }),\n              });\n            }}\n          />\n        </Form.Item>\n        <Form.Item label={\"必填\"}>\n          <Switch\n            checked={innerData.required}\n            onChange={(checked) => {\n              designerDispatch({\n                type: \"UPDATE\",\n                data: update(innerData, {\n                  required: { $set: checked },\n                }),\n              });\n            }}\n          />\n        </Form.Item>\n        <Form.Item label={\"只读\"}>\n          <Switch\n            checked={innerData.disabled}\n            onChange={(checked) => {\n              designerDispatch({\n                type: \"UPDATE\",\n                data: update(innerData, {\n                  disabled: { $set: checked },\n                }),\n              });\n            }}\n          />\n        </Form.Item>\n        <Form.Item label={\"默认值\"}>\n          <Input\n            value={innerData.defaultValue}\n            onChange={(event) => {\n              designerDispatch({\n                type: \"UPDATE\",\n                data: update(innerData, {\n                  defaultValue: { $set: event.target.value },\n                }),\n              });\n            }}\n          />\n        </Form.Item>\n      </Form>\n    </>\n  );\n}\n","import styled from \"styled-components\";\nimport { Layout } from \"antd\";\n\nconst { Header, Sider, Content } = Layout;\n\nexport const WhiteLayout = styled(Layout)`\n  background-color: white;\n`;\n\nexport const WhiteHeader = styled(Header)`\n  background-color: white;\n`;\n\nexport const WhiteSider = styled(Sider)`\n  background-color: white;\n`;\n\nexport const WhiteContent = styled(Content)`\n  background-color: white;\n`;\n","import React, {\n  Dispatch,\n  useCallback,\n  useEffect,\n  useReducer,\n  useRef,\n  useState,\n} from \"react\";\nimport { Button, Space, Modal } from \"antd\";\nimport { DndProvider } from \"react-dnd\";\nimport Backend from \"react-dnd-html5-backend\";\nimport { getActive, cloneAndForEach, reducer } from \"./util\";\nimport { CellData } from \"./schemas/CellData\";\nimport { WidgetGroups } from \"../../constants/WidgetGroups\";\nimport { DnDCell } from \"./components/DnDCell\";\nimport GridCellConfig from \"./components/GridCellConfig\";\nimport InputCellConfig from \"./components/InputCellConfig\";\nimport Form from \"../Instance\";\nimport {\n  DispatchActiveProps,\n  DispatchAddProps,\n  DispatchDeleteActiveProps,\n  DispatchEditProps,\n  DispatchInitProps,\n  DispatchMoveProps,\n  DispatchPositionedAddProps,\n  DispatchPositionedMove,\n  DispatchSetValueProps,\n  DispatchUpdateProps,\n  DispatchValidateProps,\n} from \"./schemas/ReducerAction\";\nimport styled from \"styled-components\";\nimport DateCellConfig from \"./components/DateCellConfig\";\nimport SelectCellConfig from \"./components/SelectCellConfig\";\nimport WidgetGroup from \"./components/WidgetGroup\";\nimport CheckboxCellConfig from \"./components/CheckboxCellConfig\";\nimport LabelCellConfig from \"./components/LabelCellConfig\";\nimport { CustomCell } from \"./components/Cell\";\nimport { AiOutlineEdit } from \"react-icons/all\";\nimport { TextAreaCell } from \"../TextAreaCell\";\nimport TextAreaCellConfig from \"../TextAreaCellConfig\";\nimport { WhiteContent, WhiteHeader, WhiteLayout, WhiteSider } from \"../Layout\";\n\nconst rootCellData: CellData = {\n  type: \"grid\",\n  id: \"11270307\",\n  lanes: [{ span: 24, cellDataList: [] }],\n  active: false,\n};\n\nconst RootCell = styled(DnDCell)`\n  height: 100%;\n  &:after {\n    content: \"Drag to drop\";\n    font-size: 32px;\n    color: #d3d3d3;\n    left: calc(50% - 85px);\n    top: calc(50% - 25px);\n    position: absolute;\n    display: ${(props) =>\n      props.cellData.lanes![0].cellDataList.length === 0 ? \"block\" : \"none\"};\n  }\n\n  > .lanes {\n    height: 100%;\n  }\n`;\n\nexport const DesignerContext = React.createContext<\n  Dispatch<\n    | DispatchPositionedMove\n    | DispatchPositionedAddProps\n    | DispatchActiveProps\n    | DispatchEditProps\n    | DispatchMoveProps\n    | DispatchAddProps\n    | DispatchUpdateProps\n    | DispatchDeleteActiveProps\n    | DispatchSetValueProps\n    | DispatchValidateProps\n    | DispatchInitProps\n  >\n>({} as Dispatch<any>);\nconst LeftSider = styled(WhiteSider).attrs({\n  width: 280,\n})`\n  padding: 10px;\n  border-right: 1px solid #d3d3d3;\n`;\nconst RightSider = styled(WhiteSider).attrs({\n  width: 280,\n})`\n  padding: 10px;\n  border-left: 1px solid #d3d3d3;\n`;\nconst FullHeightLayout = styled(WhiteLayout)`\n  border-top: 1px solid #d3d3d3;\n  height: calc(100% - 1px);\n`;\nconst ToolBar = styled(WhiteHeader)`\n  padding: 0 10px;\n  text-align: right;\n  border-bottom: 1px solid #a3a3a3;\n`;\n\ninterface DesignerProps {\n  customCells?: CustomCell[];\n}\n\nexport const Designer = function ({\n  customCells = [\n    {\n      type: \"textarea\",\n      icon: <AiOutlineEdit />,\n      name: \"多行文本\",\n      cell: TextAreaCell,\n      config: TextAreaCellConfig,\n    },\n  ],\n}: DesignerProps) {\n  const [data, designerDispatch] = useReducer(reducer, rootCellData);\n  const [previewDialogVisible, setPreviewDialogVisible] = useState(false);\n  const [previewData, setPreviewData] = useState<CellData | null>(null);\n  const previewRef = useRef<any>();\n  const delFunction = useCallback((event) => {\n    if (event.keyCode === 46) {\n      designerDispatch({\n        type: \"DELETE_ACTIVE\",\n      });\n    }\n  }, []);\n  useEffect(() => {\n    document.addEventListener(\"keyup\", delFunction, false);\n    return () => {\n      document.removeEventListener(\"keyup\", delFunction, false);\n    };\n  }, [delFunction]);\n  const active = getActive(data);\n\n  return (\n    <>\n      <DesignerContext.Provider value={designerDispatch}>\n        <DndProvider backend={Backend}>\n          <WhiteLayout style={{ height: \"100%\" }}>\n            <WhiteHeader style={{ padding: \"0 20px\" }}>\n              <h1>Form Designer</h1>\n            </WhiteHeader>\n            <WhiteContent>\n              <FullHeightLayout>\n                <LeftSider>\n                  {WidgetGroups.map((g) => (\n                    <WidgetGroup key={g.name} name={g.name} list={g.widgets} />\n                  ))}\n                  <WidgetGroup\n                    key={\"自定义\"}\n                    name={\"自定义\"}\n                    list={[\n                      ...customCells?.map((cell) => ({\n                        type: cell.type,\n                        name: cell.name,\n                        icon: cell.icon,\n                      })),\n                    ]}\n                  />\n                </LeftSider>\n                <WhiteContent>\n                  <WhiteLayout style={{ height: \"100%\" }}>\n                    <ToolBar>\n                      <Space>\n                        <Button\n                          onClick={() => {\n                            designerDispatch({\n                              type: \"INIT\",\n                              data: rootCellData,\n                            });\n                          }}\n                        >\n                          Reset\n                        </Button>\n                        <Button\n                          onClick={() => {\n                            setPreviewDialogVisible(true);\n                            setPreviewData(\n                              cloneAndForEach(data, function (item) {\n                                item.id += +new Date();\n                              })\n                            );\n                          }}\n                        >\n                          Preview\n                        </Button>\n                        <Button>Save</Button>\n                      </Space>\n                    </ToolBar>\n                    <WhiteContent style={{ height: \"100%\", padding: 10 }}>\n                      <RootCell\n                        cellData={data}\n                        index={0}\n                        customCells={customCells}\n                      />\n                    </WhiteContent>\n                  </WhiteLayout>\n                </WhiteContent>\n                <RightSider>\n                  {active ? (\n                    active.type === \"grid\" ? (\n                      <GridCellConfig data={active} />\n                    ) : active.type === \"input\" ? (\n                      <InputCellConfig data={active} />\n                    ) : active.type === \"datetime\" ? (\n                      <DateCellConfig data={active} />\n                    ) : active.type === \"select\" ? (\n                      <SelectCellConfig data={active} />\n                    ) : active.type === \"checkbox\" ? (\n                      <CheckboxCellConfig data={active} />\n                    ) : active.type === \"label\" ? (\n                      <LabelCellConfig data={active} />\n                    ) : (\n                      (customCells &&\n                        customCells.some((item) => item.type === active.type) &&\n                        React.createElement(\n                          customCells.filter(\n                            (item) => item.type === active.type\n                          )[0].config,\n                          {\n                            data: active,\n                            onChange: function (data: CellData) {\n                              designerDispatch({\n                                type: \"UPDATE\",\n                                data: data,\n                              });\n                            },\n                          }\n                        )) || <></>\n                    )\n                  ) : (\n                    <></>\n                  )}\n                </RightSider>\n              </FullHeightLayout>\n            </WhiteContent>\n          </WhiteLayout>\n        </DndProvider>\n        <Modal\n          width={1000}\n          title={\"Preview\"}\n          visible={previewDialogVisible}\n          onCancel={() => setPreviewDialogVisible(false)}\n          footer={[\n            <Button\n              onClick={() => {\n                const result = previewRef.current!.getData();\n                alert(JSON.stringify(result));\n              }}\n            >\n              Save\n            </Button>,\n            <Button onClick={() => previewRef.current.validate()}>\n              Validate\n            </Button>,\n          ]}\n        >\n          {previewData && (\n            <Form\n              customCells={customCells}\n              ref={previewRef}\n              data={cloneAndForEach(previewData, (data) => {\n                data.value = data.defaultValue || data.value;\n              })}\n              key={previewData.id}\n            />\n          )}\n        </Modal>\n      </DesignerContext.Provider>\n    </>\n  );\n};\n","import React from 'react';\nimport './App.css';\nimport {Designer} from './components/Designer';\n\nfunction App() {\n  return (\n      <Designer/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}